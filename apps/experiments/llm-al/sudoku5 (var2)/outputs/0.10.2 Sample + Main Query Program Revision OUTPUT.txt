% PROGRAM CHANGED? [CHANGED]
% BC+ signature
:- sorts
    integer;
    row >> integer;
    column >> integer;
    value >> integer.

:- objects
    1..9 :: integer.

:- variables
    R, R1, R2 :: row;
    C, C1, C2 :: column;
    V, V1 :: value;
    N1, N2, N3, N4 :: integer.

:- constants
    val(row, column) :: inertialFluent(value).

% Constraints

% No two cells in the same row can have the same value.
impossible val(R, C1) = V & val(R, C2) = V & C1 \= C2.

% No two cells in the same column can have the same value.
impossible val(R1, C) = V & val(R2, C) = V & R1 \= R2.

% No two cells in the same 3x3 block can have the same value.
impossible val(R1, C1) = V & val(R2, C2) = V & (R1 \= R2 | C1 \= C2) &
          N1 = ((R1 - 1) // 3) & N2 = ((R2 - 1) // 3) & N1 = N2 &
          N3 = ((C1 - 1) // 3) & N4 = ((C2 - 1) // 3) & N3 = N4.

% Each cell has a value between 1 and 9.
% Since val(R, C) :: inertialFluent(value) and value is 1..9, this is enforced.

% The given clues will be specified in the query.

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0:
        val(1,2)=9 & val(1,4)=3 & val(1,9)=1 &
        val(2,5)=8 & val(2,8)=4 & val(2,9)=6 &
        val(3,7)=8 &
        val(4,1)=4 & val(4,3)=5 & val(4,5)=6 & val(4,8)=3 &
        val(5,3)=3 & val(5,4)=2 & val(5,5)=7 & val(5,6)=5 & val(5,7)=6 &
        val(6,2)=6 & val(6,5)=1 & val(6,7)=9 & val(6,9)=4 &
        val(7,3)=1 &
        val(8,1)=5 & val(8,2)=8 & val(8,5)=2 &
        val(9,1)=2 & val(9,6)=7 & val(9,8)=6.

% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 0: Check satisfiability of program signature and rules (ignores other queries). (satisfiable)
:- query = sat.

% Query 1: Set value 5 to cell (1,1) which is empty. (satisfiable)
:- query
    0: val(1,1)=5.

% Query 2: Try to set value 5 to cell (1,1) when another cell in the same row already has value 5. (unsatisfiable)
:- query
    0: val(1,2)=5 & val(1,1)=5.

% Query 3: Try to set value 6 to cell (1,1) when another cell in the same column already has value 6. (unsatisfiable)
:- query
    0: val(2,1)=6 & val(1,1)=6.

% Query 4: Try to set value 7 to cell (1,1) when another cell in the same 3x3 block already has value 7. (unsatisfiable)
:- query
    0: val(2,2)=7 & val(1,1)=7.

% Query 5: Try to set a value to a cell that already has a value. (unsatisfiable)
:- query
    0: val(1,1)=4 & val(1,1)=5.