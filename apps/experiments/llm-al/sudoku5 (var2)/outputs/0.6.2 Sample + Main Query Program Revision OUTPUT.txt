% PROGRAM CHANGED? [CHANGED]
% BC+ signature

:- sorts
    row;
    column;
    value0 >> value.

:- objects
    0..8 :: row;
    0..8 :: column;
    1..9 :: value;
    blank :: value0.

:- variables
    R, R1, R2, R3, R4 :: row;
    C, C1, C2, C3, C4 :: column;
    V, V1, V2, V3, V4 :: value;
    V0, V0_1, V0_2, V0_3 :: value0.


:- constants
    val(row, column) :: inertialFluent(value0);
    setValue(row, column, value) :: exogenousAction.

% Default value of cells is blank
default val(R,C) = blank.

% constraints/rules

% 1. Setting a value at (row, column) causes the value at that cell to be the specified value.
setValue(R,C,V) causes val(R,C) = V.

% 2. Setting a value at (row, column) is not executable if the cell at (row, column) is not blank.
nonexecutable setValue(R,C,V) if val(R,C) \= blank.

% 3. Setting a value at (row, column) is not executable if another cell in the same row already has that value.
nonexecutable setValue(R,C,V) if val(R,C1) = V & val(R,C1) \= blank & C1 \= C.

% 4. Setting a value at (row, column) is not executable if another cell in the same column already has that value.
nonexecutable setValue(R,C,V) if val(R1,C) = V & val(R1,C) \= blank & R1 \= R.

% 5. Setting a value at (row, column) is not executable if another cell in the same 3x3 square already has that value.
nonexecutable setValue(R,C,V) if val(R1,C1) = V & val(R1,C1) \= blank & (R1 \= R | C1 \= C) & R // 3 = R1 // 3 & C // 3 = C1 // 3.

% 6. It is impossible for two cells in the same row to have the same value.
impossible val(R,C1) = V & val(R,C2) = V & V \= blank & C1 \= C2.

% 7. It is impossible for two cells in the same column to have the same value.
impossible val(R1,C) = V & val(R2,C) = V & V \= blank & R1 \= R2.

% 8. It is impossible for two cells in the same 3x3 square to have the same value.
impossible val(R1,C1) = V & val(R2,C2) = V & V \= blank & (R1 \= R2 | C1 \= C2) & R1 // 3 = R2 // 3 & C1 // 3 = C2 // 3.

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: val(0,1) = 9 & val(0,3) = 3 & val(0,8) = 1 &
       val(1,4) = 8 & val(1,7) = 4 & val(1,8) = 6 &
       val(2,6) = 8 &
       val(3,0) = 4 & val(3,2) = 5 & val(3,4) = 6 & val(3,7) = 3 &
       val(4,2) = 3 & val(4,3) = 2 & val(4,4) = 7 & val(4,5) = 5 & val(4,6) = 6 &
       val(5,1) = 6 & val(5,4) = 1 & val(5,6) = 9 & val(5,8) = 4 &
       val(6,2) = 1 &
       val(7,0) = 5 & val(7,1) = 8 & val(7,4) = 2 &
       val(8,0) = 2 & val(8,5) = 7 & val(8,7) = 6.

% SAMPLE QUERIES CHANGED? [CHANGED]

% Query 1: Set value 5 to cell (0,0) which is empty. (satisfiable)
:- query
    % No initial conditions
    0: setValue(0,0,5).

% Query 2: Try to set value 5 to cell (0,0) when another cell in the same row already has value 5. (unsatisfiable)
:- query
    0: val(0,1)=5;
    0: setValue(0,0,5).

% Query 3: Try to set value 6 to cell (0,0) when another cell in the same column already has value 6. (unsatisfiable)
:- query
    0: val(1,0)=6;
    0: setValue(0,0,6).

% Query 4: Try to set value 7 to cell (0,0) when another cell in the same 3x3 square already has value 7. (unsatisfiable)
:- query
    0: val(1,1)=7;
    0: setValue(0,0,7).

% Query 5: Try to set a value to a cell that already has a value. (unsatisfiable)
:- query
    0: val(0,0)=4;
    0: setValue(0,0,5).