% PROGRAM CHANGED? [CHANGED]

% BC+ signature

:- sorts
    row;
    column;
    value.

:- variables
    R, R1, R2 :: row;
    C, C1, C2 :: column;
    V, V1, V2 :: integer.

:- constants
    val(row, column) :: inertialFluent(integer);
    assign(row, column, integer) :: exogenousAction.

% Generated constraints

% Assigning value V to cell (R,C) causes val(R,C)=V.
assign(R,C,V) causes val(R,C)=V.

% Assignment is not executable if cell already has a different value.
nonexecutable assign(R,C,V) if val(R,C)=V1 & V1 \= V.

% No two cells in the same row can have the same value.
nonexecutable assign(R,C,V) if val(R,C1)=V & C1 \= C.

% No two cells in the same column can have the same value.
nonexecutable assign(R,C,V) if val(R1,C)=V & R1 \= R.

% No two cells in the same 3x3 block can have the same value.
nonexecutable assign(R,C,V) if val(R1,C1)=V & (R1 \= R | C1 \= C) &
    ( ( (R-1)//3 == (R1-1)//3 ) & ( (C-1)//3 == (C1-1)//3 ) ).

% MAIN QUERY CHANGED? [UNCHANGED]

:- query
    0:
        val(1,2)=9 & val(1,4)=3 & val(1,9)=1 &
        val(2,5)=8 & val(2,8)=4 & val(2,9)=6 &
        val(3,7)=8 &
        val(4,1)=4 & val(4,3)=5 & val(4,5)=6 & val(4,8)=3 &
        val(5,3)=3 & val(5,4)=2 & val(5,5)=7 & val(5,6)=5 & val(5,7)=6 &
        val(6,2)=6 & val(6,5)=1 & val(6,7)=9 & val(6,9)=4 &
        val(7,3)=1 &
        val(8,1)=5 & val(8,2)=8 & val(8,5)=2 &
        val(9,1)=2 & val(9,6)=7 & val(9,8)=6;
    maxstep: 81.

% SAMPLE QUERIES CHANGED? [UNCHANGED]

% Query 0: Check satisfiability of program signature and rules (ignores other queries). (satisfiable)
:- query = sat.

% Query 1: Assign value 5 to cell (1,1). (satisfiable)
:- query
    1:
        assign(1,1,5).

% Query 2: Try to assign value 5 to cell (1,1) when another cell in the same row already has value 5. (unsatisfiable)
:- query
    0:
        val(1,2)=5;
    1:
        assign(1,1,5).

% Query 3: Try to assign value 6 to cell (1,1) when another cell in the same column already has value 6. (unsatisfiable)
:- query
    0:
        val(2,1)=6;
    1:
        assign(1,1,6).

% Query 4: Try to assign value 7 to cell (1,1) when another cell in the same 3x3 block already has value 7. (unsatisfiable)
:- query
    0:
        val(2,2)=7;
    1:
        assign(1,1,7).

% Query 5: Try to assign a value to a cell that already has a different value. (unsatisfiable)
:- query
    0:
        val(1,1)=4;
    1:
        assign(1,1,5).