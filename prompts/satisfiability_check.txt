Action language BC+ consists of (1) a signature, which is a finite set of propositional atoms, and (2) causal laws. An atom is true, false, or of the form c=v, where c is a constant, and v is an element in its domain. Constants c are divided into two groups: fluent constants and action constants. A formula is a propositional combination of atoms. A fluent formula is a formula such that all constants occurring in it are fluent constants. An action formula is a formula that contains at least one action constant and no fluent constants. 

For example, a fluent constant "loc" which represents the location of some object, may have a value from {l1, l2, l3}. To express the location is l2, one would write:
loc = l2.

Similarly, an action constant "drive" representing driving a car, may have a value from {true, false} (though in general actions can be non-boolean). To represent this, one could write:
drive = true.

For boolean constants c, c is shorthand for c=true, and ~c is shorthand for c=false. Thus "drive = true" can be represented simply as "drive". The standard logical operators are: "-" for negation, "&" for conjunction, and "|" for disjunction. 

Numeric values may combine with unary operators "-" (negative), "abs" (absolute value, e.g., abs(n)), and binary operators "+" (addition), "-" (subtraction), "*" (multiplication), "//" (floor division), and "mod" (modulus, e.g., n mod m). Comparison is done with "=" (equality), "<" (less than), ">" (greater than), "<=" (less than or equal), and ">=" (greater than or equal).

An action description D is a set of causal laws that define a transition system, which can be represented as a directed graph. In this graph, the vertices correspond to states of the world, while the edges signify transitions between these states.

[CAUSAL LAWS: BASIC FORM]

In BC+, there are three types of basic laws: (1) static law, (2) action dynamic law, and (3) fluent dynamic law:

STATIC LAW:

	F if G,

where F and G are fluent formulas. This expresses that F is true if the formula G is true.

ACTION DYNAMIC LAW:

	F if G,

where F is an action formula and G is a formula. This expresses that action formula F is true if G is true.

FLUENT DYNAMIC LAW:

	F if G after H,

where F and G are fluent formulas, and H is a formula. This expresses that F is true if G is true after H is true.

[CAUSAL LAWS: SOME SHORTHAND ABBREVIATIONS]

BC+ allows several kinds of shorthand notation for the basic causal laws. These make it convenient to directly express commonsense knowledge.


CAUSES:

	a causes F if H,

where a is an action, F is a fluent formula, H is a formula, is shorthand for the fluent dynamic law:

	F after a & H.

This rule intuitively expresses that an action a causes some effect F if condition H is true.

IMPOSSIBLE:

	impossible F,

where F is a fluent formula, is shorthand for the static law:

	false if F.

This rule intuitively expresses that formula F should be false in every state.

NONEXECUTABLE:

	nonexecutable a_1 & ... & a_k if G,

where a_1 & ... & a_k are action constants and G is a formula, is shorthand for the fluent dynamic law:

	false if true after a_1 & ... & a_k & G.

This rule intuitively expresses that actions a_1 & ... & a_k all being true is not possible if G is true.

DEFAULT:

	default c=v if F,

where F is a fluent formula, stands for a static causal law. 

This intuitively expresses that by default c=v holds when F is true in the state. If there is evidence to the contrary, then c=v may not hold. 

	default c=v if G after H,

where G is a fluent formula, and H is a formula, and stands for a fluent dynamic law which intuitively expresses that by default c=v holds when F is true in the state and G was true in the previous state. If there is evidence to the contrary, then c=v may not hold.

ALWAYS:

	always F,

where F is a formula which can contain both fluent and action constants, is shorthand for the fluent dynamic law:

	false if true after ~F.

This rule intuitively expresses that every transition must satisfy F.

Action language BC+ is implemented in a program as follows. A BC+ program consists of a sort declaration, object declaration, variable declaration, constant declaration, along with a set of causal laws.

[Sort Declaration]
A sort is a named set of elements which is used to specify the domain of each constant and variable. First the sort is declared
using a sort declaration statement and, later, is defined by adding objects to it in an object declaration statement.

Sort declaration:
:- sorts
    int;
    box.

This declares the sorts: int, and box.

A sort can also be a supersort, that is, a sort s can automatically include the objects within another sort s2, denoted s >> s2.

:- sorts
    package >> box.
This declares the sort package and box, where package is a supersort and includes the sort box.

[Object Declaration]
An object is a value in a sort which a constant can take. It is also used
in parameter lists to construct nested objects and sets of constants. 

Object declaration:
:- objects
    1..3 :: int;
    o(int, int) :: box.

This declares 1,2, and 3 as objects within int, and the objects:
o(1, 1), o(1, 2), o(1, 3),
o(2, 1), o(2, 2), o(2, 3),
o(3, 1), o(3, 2), and o(3, 3),
as values within box.

[Variable Declaration]
A variable is a placeholder symbol which will be replaced with each object in its domain during grounding.

Variable declaration:
:- variables
    I, I1, I2 :: int;
    B, B1, B2 :: box.
This declares the variables I, I1, and I2 over the objects within int, and variables B, B1, and B2 range over the objects within box.
Variables are denoted as capital letters which are replaced with all possible values in the domain of their associated sort in a process called grounding.

[Constant Declaration]
Similar to object symbols, constants are defined within a constant declaration statement and have a base identifier, an optional list of parameter sort, and a sort which makes up the constant's domain. In addition, they have a constant declaration type, such as "exogenousAction" or "inertialFluent". Inertial fluents are common, and used for constants whose value persists through time unless affected otherwise.

Constant declaration:
:- constants
    p(int) :: inertialFluent(boolean);
    move(box) :: exogenousAction.
This declares the inertial fluent p which takes an int argument and is a boolean value, and the action move, which takes a box argument.

[CAUSAL LAWS BASIC FORM IMPLEMENTATION]

STATIC LAW EXAMPLE:

	F if G,

is written for example:

% The location of a person is the same as the car if the person is in the car.
loc(person)=L if inCar & loc(car)=L.

ACTION DYNAMIC LAW EXAMPLE:

	F if G,

is written for example:

% If A is assigned to location Loc, and it is ready, then moveTo(A) is true.
moveTo(A) if assigned(A) = Loc & ready(A),
where moveTo(A) is an action, and assigned(A) and ready(A) are fluent constants. Here moveTo is a boolean action constant.

FLUENT DYNAMIC LAW EXAMPLE:

	F if G after H,

is written for example:

% If you enter the car after the car is unlocked, then you are in the car.
in(car) if unlocked(car) after enter(car).

[CAUSAL LAW SHORTHAND ABBREVIATIONS IMPLEMENTATION]

CAUSES EXAMPLE:

An expression of the form
	a causes F if H,

is written for example:
% Driving the car to a location causes the car to be at that location of the car has gas.
drive(car, loc) causes location(car) = loc if hasGas(car)

IMPOSSIBLE EXAMPLE:

An expression of the form

	impossible F,

is written for example:

% The cat and mouse cannot be at the same location
impossible loc(cat)=Loc1 & loc(mouse) = Loc2 & Loc1=Loc2.

NONEXECUTABLE EXAMPLE:

An expression of the form:

	nonexecutable a1 & a2 & ... & an if G, 

is written for example:

% It is not permissible to drive a bus and a car if they are driving to the same location. 
	nonexecutable driveCar(Loc1) & driveBus(Loc2) if Loc1=Loc2.

% It is not permissible to lift an object if it is heavy.
nonexecutable lift(object) if heavy(object).

On the other hand, the following:

nonexecutable lifted(object) if heavy(object),

is not allowed when lifted(object) is a fluent and not an action.

DEFAULT EXAMPLES:

An expression of the form

	default c=v if F,

is written for example as:

% By default, the power is on if the switch is turned.
default powerOn if switchTurned.

An expression of the form

	default F if G after H,

is written for example as:

% The ferry will be on the right bank if it has gas after it was on the left bank, and no evidence suggests otherwise.
default ferry(right) if hasGas after ferry(left)

ALWAYS EXAMPLE:

	always F,

where F is a formula which can contain both fluent and action constants, is written for example:

% the number departing from a location is always less than or equal to the number at the location
always departing(Loc) <= numAt(Loc).

where departing/1 is an action constant and numAt/1 is a fluent.
Note: There should not be an "if" in a "always" rule, instead use "&".

[Attributes]
Attributes are types of action constants which are tied to actions, and given additional information about an action. For instance:
:- constants
    move(block) :: exogenousAction;
    destination(block) :: attribute(location) of move(block).

This declaration tells us that destination(block) is an attribute of the action of moving a block, which has value of location, representing the block's destination.

Attributes should have as their first arguments, the same arguments (and in the same order) as the action which they are an attribute of.
For example, any attribute of the action "fly(airplane,location)" should have the form "attributeName(airplane,location,...)", after which the action arguments "airplane" and "location", can other arguments be listed.
An attribute which represents the number of passengers on board of a nationality can be written as:
onBoard(airplane,location,nationality) :: attribute(integer) of fly(airplane,location).

Where the following would be incorrect:
Incorrect: passengers(nationality) :: attribute(integer) of fly(airplane,location),
since passengers should instead have the arguments "airplane" and "location" before "nationality".

[Additive Fluents and Additive Actions]

There are special constants additive fluents and additive actions, which are useful for modeling the effects of concurrent actions.
An additive fluent is a fluent (tied to states) with numerical values such that the effect of several concurrently executed actions on it can be computed by adding the effects of the individual actions.
An additive action constant (tied to a transition) is similar except that it can handle numeric values of concurrent actions during transitions.

With a buy and sell action, and numExchanged attribute of exchange, additive fluents and additive actions can be declared as follows:
:- constants
    buy(item) :: exogenousAction;
    sell(item) :: exogenousAction;
    exchange(item) :: exogenousAction;
    numExchanged(item) :: attribute(integer) of exchange(item); 
    inStock(item) :: additiveFluent(integer);
    netChange(item) :: additiveAction(integer).

inStock(item) represents the the number of an item in stock, which can be affected by both buy(item) and sell(item). netChange(item) represents the net number of an item which is exchanged or bought/sold during a given transition or event.

INCREMENT/DECREMENT LAWS:
Additive fluents can only be updated in increment/decrement laws, which are expressed as:

    a increments c by v if G,

where a is an action, c is an additive fluent, v is an integer, and G is a fluent, is used to express that some additive fluent (c), should increase by some value v if G is true and action a happens.

Similarly:

    a decrements c by v if G,

is used to decrease the additive constant c by value v if G is true and action a happens.

Examples:
% buy(coin) increments has(coin) by N if howMany(coin,N).
% buy(coin) decrements has(money) by N*M if howMany(coin,N) & price(coin)=M.

Additive actions similarly are only updated in increment/decrement statements:

    a increments c by v if G.
    a decrements c by v if G.

where c is an additive action.
While additive fluents are used to describe state information, additive actions are about events/transitions. For example, suppose multiple actions can occur at once for a domain involving buying and selling, and the additive action netExchanged is declared:
% buy(coin) increments netExchanged(coin) by N if howMany(coin,N).
% sell(coin) decrements netExchanged(coin) by N if howMany(coin,N).

This is useful for tracking numerical values during a transition, which may be used, e.g., if there should never be a negative amount of net coins exchanged at a given time, then netExchanged(coin) can be used to construct such a law.

In general, if something causes something to increase/decrease, then we use increment/decrement. Updating the value of an additive fluent or action can only be done in an increment or decrement law (e.g., "a causes c=2" is not allowed if "c" represents an additive fluent/action).

Example Programs:

[EXAMPLE 1]

Problem description:
Blocks can be stacked on top of each other or on a table. Blocks stacked on the table are in a tower.

There are two main types of things: loc and block.
loc includes block.

b1, b2, b3, and b4 are blocks.
table is a loc.

Actions
Moving a block to a location.

Query
Initially, block b1 is on b2, b2 is on the table, b3 is on the table, and b4 is on b3. Find a plan so that block b1 is on b4, b2 is on b3, b3 is on b1, and b4 is on the table.

BC+ Program:
:- sorts
    loc >> block.
:- objects
    b1, b2, b3, b4 :: block;
    table :: loc.
:- constants
    loc(block) :: inertialFluent(loc);
    in_tower(block) :: inertialFluent(boolean);
    move(block, loc) :: exogenousAction.
:- variables
    B, B1, B2, B4 :: block;
    L, L1, L2, L3 :: loc.

% Two blocks cannot be at the same location. (Use loc(block). Since it is a fluent, we use impossible. Since we use impossible, we only use "&". "if" is not allowed). Use "\=" to differentiate B1 and B2.
impossible loc(B1) = B & loc(B2) = B & B1\=B2. 

% A block is in a tower if it's location is on the table. ("Static law")
in_tower(B) if loc(B) = table.

% A block is in a tower if it's location is on something that is in a tower. ("Static law")
in_tower(B) if loc(B) = B1 & in_tower(B1).

% Blocks don't float in the air. (Use in_tower(block). Since it is a fluent, we use impossible. Since we use impossible, we only use "&". "if" is not allowed)
impossible ~in_tower(B).

% Moving a block causes it's location to move to loc. ("causes" rule)
move(B,L) causes loc(B)=L.

% The move action is not permissible if something is on the location to be moved to. (Use move(block, loc). Since it is an action, we use nonexecutable.)
nonexecutable move(B,L) if loc(B1) = B.

% A block is in tower after it is in tower and it is on a block.
in_tower(B) after in_tower(B) and loc(B)=B1.

% By default, all blocks are in a tower.
default ~in_tower(B).

:- query
	0: loc(b1) = b2 & loc(b2) = table & loc(b3) = table & loc(b4)=b3);
	maxstep: loc(b1) = b4 & loc(b2) = b3 & loc(b3)=b1 & loc(b4) = table. 

[EXAMPLE 2]

Problem description:
A monkey wants to get a bunch of bananas hanging from the ceiling. He can reach the bananas by first pushing a box to the empty place under the bananas and then climbing on top of the box.

There are three main types of things: "monkey", "thing" and "location".
"thing" includes "monkey".

monkey, bananas, and box are things.
l1, l2, and l3 are locations.

Actions
walk to a location
push box to a location
climb on
climb off
grasp bananas

Query
Initially, the monkey is at location l1, the box is at l2, and the bananas are at location l3. Generate a plan so that the monkey has the bananas.

BC+ program:
:- sorts
    thing;
    location.

:- objects
    monkey,bananas,box :: thing;
    l1,l2,l3 :: location.

:- variables
    Loc, Loc1, Loc2 :: location;
    Bool, Bool1, Bool2 :: boolean.

:- constants
    loc(thing) :: inertialFluent(location);
    hasBananas,onBox :: inertialFluent;
    walk(location) :: exogenousAction;
    pushBox(location) :: exogenousAction;
    climbOn :: exogenousAction;
    climbOff :: exogenousAction;
    graspBananas :: exogenousAction.

% The location of the bananas is where the monkey is if the monkey has bananas.
loc(bananas)=Loc if hasBananas & loc(monkey)=Loc.

% The location of the monkey is where the box is if the monkey is on the box. 
loc(monkey)=Loc if onBox & loc(box)=Loc.

% The monkey cannot be in two places at once.
impossible loc(monkey) = Loc1 & loc(monkey)=Loc2 & Loc1\=Loc2.

% Walking to a location causes the monkey's location to change.
walk(Loc) causes loc(monkey)=Loc.

% Walking is not permissible to a location if the monkey is already in that location.
nonexecutable walk(Loc) if loc(monkey)=Loc.

% Walking is not permissible if the monkey is on the box.
nonexecutable walk(Loc) if onBox.

% Pushing the box to a location causes the location of the box to move.
pushBox(Loc) causes loc(box)=Loc.

% Pushing the box to a location causes the location of the monkey to move.
pushBox(Loc) causes loc(monkey)=Loc.

% Pushing the box is not permissible to a location if the monkey is at that location.
nonexecutable pushBox(Loc) if loc(monkey)=Loc.

% Pushing the box is not permissible if the monkey is on the box.
nonexecutable pushBox(Loc) if onBox.

% Pushing the box is not permissible if the location of the monkey is not the same as the location of the box.
nonexecutable pushBox(Loc) if loc(monkey)\=loc(box).

% Climbing on the box causes the monkey to be on the box.
climbOn causes onBox.

% Climbing on the box is not permissible if the monkey is already on the box.
nonexecutable climbOn if onBox.

% Climbing on the box is not permissible if the location of the monkey is not the same as the box.
nonexecutable climbOn if loc(monkey)\=loc(box).

% Climbing off of the box causes the monkey to not be on the box.
climbOff causes ~onBox.

% Climbing off of the box is not permissible if the monkey is not on the box.
nonexecutable climbOff if ~onBox.

% Grasping the bananas causes the monkey to have the bananas.
graspBananas causes hasBananas.

% Grasping the bananas is not permissible if the monkey already has the bananas.
nonexecutable graspBananas if hasBananas.

% Grasping the bananas is not permissible if the monkey is not on the box.
nonexecutable graspBananas if ~onBox.

% Grasping the bananas is not permissible if the location of the monkey is not the same as the location of the bananas.
nonexecutable graspBananas if loc(monkey)\=loc(bananas).

:- query
	0: loc(monkey)=l1 & loc(box) = l2 & loc(bananas) = l3 & ~hasBananas & ~onBox;
	maxstep: hasBananas.

[EXAMPLE 3]

Problem description:
A fleet of vehicles which have some capacity can drive passengers to from locations to other locations. 

There are three main types of things: vehicle, location, and integer.

bus1 and bus2 are vehicles.
stop1, stop2, and stop3 are locations.
0..20 are integers.

Actions
Driving the vehicile is an action.

Query
Initially, 10 passengers are at stop1, 10 passengers are at stop2, and 0 passengers are at stop3. bus1 has capacity 3 and bus2 has capacity 4. Find a plan so that all 20 passengers are at stop3.

BC+ program:
:- sorts
    vehicle;
    location;
    integer.

:- variables
    V, V1, V2, V3, V4 :: vehicle;
    Loc, Loc1, Loc2, Loc3, Loc4 :: location;
    N, N1, N2, N3, N4 :: integer.

:- objects
    bus1, bus2 :: vehicle;
    stop1, stop2, stop3 :: location;
    0..20 :: integer.

:- constants
    loc(vehicle) :: inertialFluent(location);
    capacity(vehicle) :: inertialFluent(integer);
    drive(vehicle) :: exogenousAction;
    going(vehicle) :: attribute(location) of drive(vehicle);
    amount(vehicle) :: attribute(integer) of drive(vehicle);
    numAt(location) :: additiveFluent(integer);
    departing(location) :: additiveAction(integer).

% Driving a vehicle causes the location of the vehicle to change. ("causes" rule)
drive(V) causes loc(V)=Loc if going(V)=Loc.

% Driving a vehicle causes the number of passengers at the original location to decrease. ("decrement" rule. Since we use the drive action, we also use its attribute amount')
drive(V) decrements numAt(Loc1) by N if amount(V)=N & loc(V)=Loc1.

% Driving a vehicle causes the number of passengers at the destination location to increase. ("increment" rule. Since we use the drive action, we also use its attribute amount')
drive(V) increments numAt(Loc2) by N if amount(V)=N & going(V)=Loc2.

% Driving a vehicle is not executable if the number of passengers on the vehicle is greater than the capacity of the vehicle. (Use drive(vehicle). Since it is an action, we use nonexecutable.)
nonexecutable drive(V) if amount(V) > capacity(V).

% Driving a vehicle is not permissible if the amount of passengers on the vehicle is zero. (Use drive(vehicle). Since it is an action, we use nonexecutable.)
nonexecutable drive(V) if amount(V)=0.

% Driving increases the amount that are departing by the amount of passengers on board. ("increment" rule. Since we use the drive action, we also use its attribute amount')
drive(V) increments departing(Loc) by N if loc(V)=Loc & amount(V)=N.

% The amount of passengers departing must not be greater than the number of passengers at the location departing from. ("always" rule.)
always departing(Loc) <= numAt(Loc).

% The capacity of bus1 and bus2 have capacity 3 and 4.
capacity(bus1) = 3.
capacity(bus2) = 4.

:- query
	0: numAt(stop1) = 10 & numAt(stop2) = 10 & numAt(stop3) = 0;
	maxstep: numAt(stop3) = 20.

[INSTRUCTIONS]
Consider the problem and BC+ program, which when run with a basic query to check satisfiability (independent of the main query), fails.

[Problem]
<PROBLEM DESCRIPTION>

BC+ Program:
<BC+ PROGRAM>

Main query:
<QUERY>
<BC QUERY>

Feedback:
<FEEDBACK>

Based on the feedback, revise the program (signature and/or rules), and possibly the main query if needed to match a new signature. The format should be like the following, with everything together, encapsulated in 3 backticks:

```% BC+ signature
<Enter BC+ signature>

% Generated constraints
<Enter BC+ rules/constraints>

% Main query
<Enter the main query>```