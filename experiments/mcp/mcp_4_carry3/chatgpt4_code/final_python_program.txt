def is_valid(state):
    m_left, c_left, m_right, c_right = state
    # Conditions to check on both banks
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if m_left < c_left and m_left > 0:
        return False
    if m_right < c_right and m_right > 0:
        return False
    return True

def bfs_solve():
    initial_state = (6, 6, 0, 0)
    queue = [(initial_state, [])]
    seen = set()

    while queue:
        (m_left, c_left, m_right, c_right), path = queue.pop(0)
        if (m_left, c_left, m_right, c_right) in seen:
            continue
        seen.add((m_left, c_left, m_right, c_right))

        # Goal check: all missionaries and cannibals are on the right bank
        if m_left == 0 and c_left == 0:
            return path

        # Generate possible moves
        for m in range(3):  # up to 2 missionaries
            for c in range(3):  # up to 2 cannibals
                if 1 <= m + c <= 2:  # at least one and at most two people on the boat
                    # Try moving to the right bank
                    new_state = (m_left - m, c_left - c, m_right + m, c_right + c)
                    if is_valid(new_state):
                        queue.append((new_state, path + [(m, c, "right")]))
                    # Try moving to the left bank
                    new_state = (m_left + m, c_left + c, m_right - m, c_right - c)
                    if is_valid(new_state):
                        queue.append((new_state, path + [(m, c, "left")]))
    return None

bfs_solve()