% PROGRAM CHANGED? [CHANGED]
% BC+ signature

:- sorts
    vessel;
    location;
    group;
    integer.

:- objects
    boat1 :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals :: group;
    0..12 :: integer.

:- constants
    loc(vessel) :: inertialFluent(location);
    numAt(group, location) :: additiveFluent(integer);
    capacity(vessel) :: inertialFluent(integer);
    cross(vessel) :: exogenousAction;
    transporting(vessel, group) :: attribute(integer) of cross(vessel).

:- variables
    V, V1, V2, V3, V4 :: vessel;
    Loc, Loc1, Loc2, Loc3, Loc4 :: location;
    G, G1, G2, G3, G4 :: group;
    N, N1, N2, N3, N4, N_c, N_c1, N_c2, N_m, N_m1, N_m2 :: integer;
    Bool, Bool1, Bool2, Bool3, Bool4 :: boolean.

% Generated constraints

% 1. Crossing a vessel causes its loc(vessel) to change to the other bank.
cross(V) causes loc(V) = bank2 if loc(V) = bank1.
cross(V) causes loc(V) = bank1 if loc(V) = bank2.

% 2. [CHANGED] Crossing a vessel causes numAt(group, loc(V)) to decrease by transporting(vessel, group).
cross(V) decrements numAt(G, bank1) by N if transporting(V, G) = N & loc(V) = bank1.
cross(V) decrements numAt(G, bank2) by N if transporting(V, G) = N & loc(V) = bank2.

% 3. [CHANGED] Crossing a vessel causes numAt(group, the other bank) to increase by transporting(vessel, group).
cross(V) increments numAt(G, bank2) by N if transporting(V, G) = N & loc(V) = bank1.
cross(V) increments numAt(G, bank1) by N if transporting(V, G) = N & loc(V) = bank2.

% 4. The action cross(vessel) is not executable if the sum of transporting(vessel, missionaries) and transporting(vessel, cannibals) is zero.
nonexecutable cross(V) if N1 + N2 = 0 & N1 = transporting(V, missionaries) & N2 = transporting(V, cannibals).

% 5. The action cross(vessel) is not executable if the sum of transporting(vessel, group) exceeds capacity(vessel).
nonexecutable cross(V) if N1 + N2 > N3 & N1 = transporting(V, missionaries) & N2 = transporting(V, cannibals) & N3 = capacity(V).

% 6. The action cross(vessel) is not executable if transporting(vessel, group) exceeds numAt(group, loc(V)) for any group.
nonexecutable cross(V) if N1 > N2 & N1 = transporting(V, G) & N2 = numAt(G, loc(V)).

% 7. The action cross(vessel) is not executable if transporting(V, G) is negative for any group.
nonexecutable cross(V) if N1 < 0 & N1 = transporting(V, G).

% 8. It is not allowed for numAt(cannibals, location) to exceed numAt(missionaries, location) at any location where numAt(missionaries, location) is greater than zero.
always numAt(cannibals, Loc) <= numAt(missionaries, Loc) | numAt(missionaries, Loc) = 0.

% 9. The action cross(vessel) is not executable if transporting(vessel, cannibals) exceeds transporting(vessel, missionaries) during the crossing when transporting(vessel, missionaries) is greater than zero.
nonexecutable cross(V) if N_c > N_m & N_m > 0 & N_c = transporting(V, cannibals) & N_m = transporting(V, missionaries).

% 13. The capacity of the vessel is 3.
capacity(boat1) = 3.

% 16. The numAt(group, location) is always between 0 and 6 inclusive for each group.
always numAt(G, Loc) >= 0 & numAt(G, Loc) <= 6.

% 17. The total number of missionaries remains constant across both banks.
always N_m1 + N_m2 = 6 & N_m1 = numAt(missionaries, bank1) & N_m2 = numAt(missionaries, bank2).
% The total number of cannibals remains constant across both banks.
always N_c1 + N_c2 = 6 & N_c1 = numAt(cannibals, bank1) & N_c2 = numAt(cannibals, bank2).


% MAIN QUERY CHANGED? [UNCHANGED]
% Six missionaries and six cannibals are at location bank1. The boat is at location bank1. Find a plan so that all missionaries and all cannibals are at location bank2.

:- query
    0: numAt(missionaries, bank1) = 6 & numAt(cannibals, bank1) = 6 & numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 & loc(boat1) = bank1;
    maxstep: numAt(missionaries, bank2) = 6 & numAt(cannibals, bank2) = 6 & numAt(missionaries, bank1) = 0 & numAt(cannibals, bank1) = 0.


% SAMPLE QUERIES CHANGED? [CHANGED]

% Query 1: Try to cross the boat with zero passengers (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 6 & numAt(cannibals, bank1) = 6 & loc(boat1) = bank1;
    0: cross(boat1);
    0: transporting(boat1, missionaries) = 0 & transporting(boat1, cannibals) = 0;
    maxstep: loc(boat1) = bank2.

% Query 2: Cross the boat with 2 missionaries and 1 cannibal from bank1 to bank2 (unsatisfiable because cannibals outnumber missionaries on bank1 after crossing)
:- query
    0: numAt(missionaries, bank1) = 6 & numAt(cannibals, bank1) = 6 & loc(boat1) = bank1;
    0: cross(boat1);
    0: transporting(boat1, missionaries) = 2 & transporting(boat1, cannibals) = 1;
    maxstep:
        numAt(missionaries, bank1) = 4 & numAt(cannibals, bank1) = 5 &
        numAt(missionaries, bank2) = 2 & numAt(cannibals, bank2) = 1 &
        loc(boat1) = bank2.

% Query 3: Try to cross the boat with 3 missionaries and 1 cannibal (unsatisfiable because exceeds capacity)
:- query
    0: numAt(missionaries, bank1) = 6 & numAt(cannibals, bank1) = 6 & loc(boat1) = bank1;
    0: cross(boat1);
    0: transporting(boat1, missionaries) = 3 & transporting(boat1, cannibals) = 1;
    maxstep: loc(boat1) = bank2.

% Query 4: Try to cross one cannibal from bank1 to bank2 when cannibals would outnumber missionaries on bank2 (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 &
       numAt(missionaries, bank2) = 3 & numAt(cannibals, bank2) = 3 &
       loc(boat1) = bank1;
    0: cross(boat1);
    0: transporting(boat1, missionaries) = 0 & transporting(boat1, cannibals) = 1;
    maxstep:
        numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 2 &
        numAt(missionaries, bank2) = 3 & numAt(cannibals, bank2) = 4 &
        loc(boat1) = bank2.

% Query 5: Cross two cannibals from bank1 to bank2 (satisfiable)
:- query
    0: numAt(missionaries, bank1) = 6 & numAt(cannibals, bank1) = 6 &
       numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 &
       loc(boat1) = bank1;
    0: cross(boat1);
    0: transporting(boat1, missionaries) = 0 & transporting(boat1, cannibals) = 2;
    maxstep:
        numAt(missionaries, bank1) = 6 & numAt(cannibals, bank1) = 4 &
        numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 2 &
        loc(boat1) = bank2.