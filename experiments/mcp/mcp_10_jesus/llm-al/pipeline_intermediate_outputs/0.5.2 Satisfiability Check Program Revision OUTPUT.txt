% BC+ signature
:- sorts
    vessel;
    location;
    group;
    integer.

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals, jesus :: group;
    0..10 :: integer.

:- variables
    Vessel :: vessel;
    G :: group;
    Loc, Loc1, Loc2, L1, L2 :: location;
    N, N1, N2, N3, N_total, Cap, N_m, N_c, L_m, L_c, Rem_m, Rem_c :: integer;
    Bool :: boolean.

:- constants
    numOnBank(group, location) :: additiveFluent(integer);
    jesusLocation :: inertialFluent(location);
    boatLocation :: inertialFluent(location);
    cross(vessel) :: exogenousAction;
    loading(vessel, group) :: attribute(integer) of cross(vessel);
    jesusOnBoat(vessel) :: attribute(boolean) of cross(vessel);
    walk :: exogenousAction;
    capacity(vessel) :: rigid(integer);
    totalNum(group) :: rigid(integer);
    oppositeBank(location) :: rigid(location).

% Generated constraints

% 1. Crossing the boat causes the boatLocation to change to the opposite bank.
cross(Vessel) causes boatLocation = Loc2 if boatLocation = Loc1 & Loc2 = oppositeBank(Loc1).

% 2. Crossing the boat causes numOnBank(group, boatLocation) to decrease by loading(Vessel, group) for each group.
cross(Vessel) decrements numOnBank(G, boatLocation) by N if loading(Vessel, G) = N.

% 3. Crossing the boat causes numOnBank(group, opposite bank) to increase by loading(Vessel, group) for each group.
cross(Vessel) increments numOnBank(G, Loc2) by N if boatLocation = Loc1 & Loc2 = oppositeBank(Loc1) & loading(Vessel, G) = N.

% 4. Crossing the boat causes jesusLocation to change to the opposite bank if jesusOnBoat(Vessel) is true.
cross(Vessel) causes jesusLocation = Loc2 if boatLocation = Loc1 & jesusOnBoat(Vessel) = true & Loc2 = oppositeBank(Loc1).

% 5. Walking causes jesusLocation to change to the opposite bank.
walk causes jesusLocation = Loc2 if jesusLocation = Loc1 & Loc2 = oppositeBank(Loc1).

% 6a. Crossing the boat is not executable if jesusOnBoat(Vessel) is true and the total number of people loaded onto the boat (including Jesus) is less than one.
nonexecutable cross(Vessel) if N_total < 1 & N_total = N1 + N2 + 1 & loading(Vessel, missionaries) = N1 & loading(Vessel, cannibals) = N2 & jesusOnBoat(Vessel) = true.

% 6b. Crossing the boat is not executable if jesusOnBoat(Vessel) is false and the total number of people loaded onto the boat is less than one.
nonexecutable cross(Vessel) if N_total < 1 & N_total = N1 + N2 & loading(Vessel, missionaries) = N1 & loading(Vessel, cannibals) = N2 & jesusOnBoat(Vessel) = false.

% 7a. Crossing the boat is not executable if jesusOnBoat(Vessel) is true and the total number of people loaded onto the boat exceeds capacity(Vessel).
nonexecutable cross(Vessel) if N_total > Cap & N_total = N1 + N2 + 1 & loading(Vessel, missionaries) = N1 & loading(Vessel, cannibals) = N2 & capacity(Vessel) = Cap & jesusOnBoat(Vessel) = true.

% 7b. Crossing the boat is not executable if jesusOnBoat(Vessel) is false and the total number of people loaded onto the boat exceeds capacity(Vessel).
nonexecutable cross(Vessel) if N_total > Cap & N_total = N1 + N2 & loading(Vessel, missionaries) = N1 & loading(Vessel, cannibals) = N2 & capacity(Vessel) = Cap & jesusOnBoat(Vessel) = false.

% 8. Crossing the boat is not executable if loading(Vessel, group) is greater than numOnBank(group, boatLocation) for any group.
nonexecutable cross(Vessel) if loading(Vessel, G) > N & numOnBank(G, Loc) = N & boatLocation = Loc.

% 9a. Crossing the boat is not executable if cannibals loaded onto the boat exceed missionaries loaded onto the boat plus one if jesusOnBoat(Vessel) is true.
nonexecutable cross(Vessel) if N_c > N_m + 1 & loading(Vessel, cannibals) = N_c & loading(Vessel, missionaries) = N_m & jesusOnBoat(Vessel) = true.

% 9b. Crossing the boat is not executable if cannibals loaded onto the boat exceed missionaries loaded onto the boat if jesusOnBoat(Vessel) is false.
nonexecutable cross(Vessel) if N_c > N_m & loading(Vessel, cannibals) = N_c & loading(Vessel, missionaries) = N_m & jesusOnBoat(Vessel) = false.

% 10. Crossing the boat is not executable if cannibals remaining on the starting bank after loading would outnumber missionaries remaining on the starting bank plus one if jesusLocation is at the starting bank and jesusOnBoat(Vessel) is false.
nonexecutable cross(Vessel) if Rem_c > Rem_m + 1 & boatLocation = Loc & jesusLocation = Loc & jesusOnBoat(Vessel) = false &
    numOnBank(cannibals, Loc) = N_c & numOnBank(missionaries, Loc) = N_m &
    loading(Vessel, cannibals) = L_c & loading(Vessel, missionaries) = L_m &
    Rem_c = N_c - L_c & Rem_m = N_m - L_m.

% 11. Walking is not executable if Jesus is already on the opposite bank.
nonexecutable walk if L1 = jesusLocation & L2 = oppositeBank(L1) & jesusLocation = L2.

% 12. At any time, the total number of people in each group equals totalNum(group). (For groups other than jesus)
always numOnBank(G, bank1) + numOnBank(G, bank2) = totalNum(G) if G \= jesus.

% For Jesus individually
always numOnBank(jesus, Loc) = 1 if jesusLocation = Loc.
always numOnBank(jesus, Loc) = 0 if jesusLocation \= Loc.

% 14a. It is impossible for cannibals to outnumber missionaries on either bank when Jesus is at that bank.
impossible numOnBank(cannibals, Loc) > numOnBank(missionaries, Loc) + 1 & jesusLocation = Loc.

% 14b. It is impossible for cannibals to outnumber missionaries on either bank when Jesus is not at that bank.
impossible numOnBank(cannibals, Loc) > numOnBank(missionaries, Loc) & jesusLocation \= Loc.

% 15a. It is not permissible for cannibals to outnumber missionaries on the boat during crossing when Jesus is on the boat.
nonexecutable cross(Vessel) if N_c > N_m +1 & loading(Vessel, cannibals) = N_c & loading(Vessel, missionaries) = N_m & jesusOnBoat(Vessel) = true.

% 15b. It is not permissible for cannibals to outnumber missionaries on the boat during crossing when Jesus is not on the boat.
nonexecutable cross(Vessel) if N_c > N_m & loading(Vessel, cannibals) = N_c & loading(Vessel, missionaries) = N_m & jesusOnBoat(Vessel) = false.

% 17a. Loading(Vessel, group) during a crossing must be between zero and numOnBank(group, boatLocation).
nonexecutable cross(Vessel) if loading(Vessel, G) > N & numOnBank(G, Loc) = N & boatLocation = Loc.

% 17b. Loading(Vessel, group) during a crossing must be at least zero (cannot be negative).
nonexecutable cross(Vessel) if loading(Vessel, G) < 0.

% 19. It is impossible to cross the boat and walk at the same time.
nonexecutable cross(Vessel) & walk.

% 20. The capacity of the boat is capacity(boat).
capacity(boat) = 2.

% Total number of people in each group.
totalNum(missionaries) = 3.
totalNum(cannibals) = 3.
totalNum(jesus) = 1.

% Define oppositeBank as a rigid constant.
oppositeBank(bank1) = bank2.
oppositeBank(bank2) = bank1.

% Main query
:- query
    0: numOnBank(missionaries, bank1) = 3 & numOnBank(cannibals, bank1) = 3 & numOnBank(missionaries, bank2) = 0 & numOnBank(cannibals, bank2) = 0 & jesusLocation = bank1 & boatLocation = bank1;
    maxstep: numOnBank(missionaries, bank2) = 3 & numOnBank(cannibals, bank2) = 3 & numOnBank(missionaries, bank1) = 0 & numOnBank(cannibals, bank1) = 0 & jesusLocation = bank2.
