% PROGRAM CHANGED? [CHANGED]
% BC+ signature

:- sorts
    person,
    missionary,
    cannibal,
    vessel,
    location.

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    m1, m2, m3 :: missionary;
    c1, c2 :: cannibal;
    bc :: cannibal;  % bc represents the big cannibal

:- constants
    loc(person) :: inertialFluent(location);
    boatLoc :: inertialFluent(location);
    cross(vessel) :: exogenousAction;
    onBoat(person) :: attribute(boolean) of cross(vessel).

:- variables
    P :: person;
    M :: missionary;
    C :: cannibal;
    N_c, N_m, N :: integer;
    Loc :: location.

% Generated constraints

% A person is a missionary or a cannibal
person(P) :- missionary(P).
person(P) :- cannibal(P).

% Crossing the vessel causes the boat location to change to the opposite bank.
cross(boat) causes boatLoc = bank2 if boatLoc = bank1.
cross(boat) causes boatLoc = bank1 if boatLoc = bank2.

% Crossing the vessel causes the location of people on the boat to change to the opposite bank.
cross(boat) causes loc(P) = L_opposite if onBoat(P) & boatLoc = L & L_opposite \= L & (L_opposite = bank1 | L_opposite = bank2).

% The cross action is not executable if the boat is empty.
nonexecutable cross(boat) if not (onBoat(P)).

% The cross action is not executable if more than 2 people are on the boat.
nonexecutable cross(boat) if N > 2 & N = #(P : onBoat(P)).

% The cross action is not executable if bigCannibal is on the boat with another person.
nonexecutable cross(boat) if onBoat(bc) & N > 1 & N = #(P : onBoat(P)).

% The cross action is not executable if any person on the boat is not at the same location as the boat.
nonexecutable cross(boat) if onBoat(P) & loc(P) \= boatLoc.

% It's impossible for cannibals to outnumber missionaries at any location where missionaries are present.
impossible N_c > N_m & N_m > 0 & N_c = #(C : loc(C) = Loc) & N_m = #(M : loc(M) = Loc).

% The cross action is not executable if cannibals on the boat outnumber missionaries on the boat when missionaries are present.
nonexecutable cross(boat) if N_c > N_m & N_m > 0 & N_c = #(C : onBoat(C)) & N_m = #(M : onBoat(M)).

% MAIN QUERY CHANGED? [CHANGED]
:- query
    0: loc(m1) = bank1 & loc(m2) = bank1 & loc(m3) = bank1 &
       loc(c1) = bank1 & loc(c2) = bank1 & loc(bc) = bank1 &
       boatLoc = bank1;
    maxstep: loc(m1) = bank2 & loc(m2) = bank2 & loc(m3) = bank2 &
             loc(c1) = bank2 & loc(c2) = bank2 & loc(bc) = bank2 &
             boatLoc = bank2.

% SAMPLE QUERIES CHANGED? [CHANGED]

% Query 1: Attempt to cross the river with no one on the boat (unsatisfiable)
:- query
    0: loc(m1) = bank1 & loc(c1) = bank1 & boatLoc = bank1;
    0: cross(boat);
    0: ~onBoat(m1) & ~onBoat(c1).

% Query 2: Cross the river with bigCannibal alone from bank1 to bank2 (satisfiable)
:- query
    0: loc(bc) = bank1 & boatLoc = bank1;
    0: cross(boat);
    0: onBoat(bc).

% Query 3: Try to have bigCannibal cross with another person in the boat from bank1 to bank2 (unsatisfiable)
:- query
    0: loc(bc) = bank1 & loc(c1) = bank1 & boatLoc = bank1;
    0: cross(boat);
    0: onBoat(bc) & onBoat(c1).

% Query 4: Try to cross the river with three people in the boat (unsatisfiable)
:- query
    0: loc(m1) = bank1 & loc(c1) = bank1 & loc(c2) = bank1 & boatLoc = bank1;
    0: cross(boat);
    0: onBoat(m1) & onBoat(c1) & onBoat(c2).

% Query 5: Attempt to have cannibals outnumber missionaries on the boat (unsatisfiable)
:- query
    0: loc(m1) = bank1 & loc(c1) = bank1 & loc(c2) = bank1 & boatLoc = bank1;
    0: cross(boat);
    0: ~onBoat(m1) & onBoat(c1) & onBoat(c2).