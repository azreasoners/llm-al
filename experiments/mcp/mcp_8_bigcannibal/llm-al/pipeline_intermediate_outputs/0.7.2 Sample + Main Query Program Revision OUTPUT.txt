% PROGRAM CHANGED? [UNCHANGED]
% BC+ signature
:- sorts
    vessel;
    location;
    group;
    integer.

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionary, cannibal, bigCannibal :: group;
    0..10 :: integer.

:- variables
    V :: vessel;
    G :: group;
    N, N1, N2, N3, NTotal :: integer;
    N_m, N_c, N_bc :: integer;
    Loc :: location.

:- constants
    cross(vessel) :: exogenousAction;
    numCrossing(vessel, group) :: attribute(integer) of cross(vessel);
    numAt(group, location) :: additiveFluent(integer);
    boatLoc :: inertialFluent(location).

% Generated constraints

% Crossing the vessel causes the boat location to change to the opposite bank.
cross(V) causes boatLoc = bank2 if boatLoc = bank1.

cross(V) causes boatLoc = bank1 if boatLoc = bank2.

% Crossing the vessel decrements the number at the original location by the number crossing in each group.
cross(V) decrements numAt(G, boatLoc) by N if numCrossing(V, G) = N.

% Crossing the vessel increments the number at the opposite location by the number crossing in each group.
cross(V) increments numAt(G, bank2) by N if numCrossing(V, G) = N & boatLoc = bank1.

cross(V) increments numAt(G, bank1) by N if numCrossing(V, G) = N & boatLoc = bank2.

% The cross action is not executable if the total number crossing is zero.
nonexecutable cross(V) if NTotal = N1 + N2 + N3 & NTotal = 0 & numCrossing(V, missionary) = N1 & numCrossing(V, cannibal) = N2 & numCrossing(V, bigCannibal) = N3.

% The cross action is not executable if the total number crossing exceeds two.
nonexecutable cross(V) if NTotal = N1 + N2 + N3 & NTotal > 2 & numCrossing(V, missionary) = N1 & numCrossing(V, cannibal) = N2 & numCrossing(V, bigCannibal) = N3.

% The cross action is not executable if the number of missionaries crossing exceeds the number at the location.
nonexecutable cross(V) if numCrossing(V, missionary) = N & numAt(missionary, boatLoc) = N1 & N > N1.

% The cross action is not executable if the number of cannibals crossing exceeds the number at the location.
nonexecutable cross(V) if numCrossing(V, cannibal) = N & numAt(cannibal, boatLoc) = N1 & N > N1.

% The cross action is not executable if the number of bigCannibals crossing exceeds the number at the location.
nonexecutable cross(V) if numCrossing(V, bigCannibal) = N & numAt(bigCannibal, boatLoc) = N1 & N > N1.

% The cross action is not executable if bigCannibal is crossing with others.
nonexecutable cross(V) if numCrossing(V, bigCannibal) > 0 & numCrossing(V, missionary) = N1 & numCrossing(V, cannibal) = N2 & numCrossing(V, bigCannibal) = N3 & NTotal = N1 + N2 + N3 & NTotal > 1.

% It's impossible for cannibals to outnumber missionaries at a location when missionaries are present.
impossible numAt(missionary, Loc) = N_m & N_m > 0 & numAt(cannibal, Loc) = N_c & numAt(bigCannibal, Loc) = N_bc & N_c + N_bc > N_m.

% The cross action is not executable if cannibals crossing outnumber missionaries crossing.
nonexecutable cross(V) if numCrossing(V, missionary) = N_m & N_m > 0 & numCrossing(V, cannibal) = N_c & numCrossing(V, bigCannibal) = N_bc & N_c + N_bc > N_m.

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: numAt(missionary, bank1) = 3 & numAt(cannibal, bank1) = 2 & numAt(bigCannibal, bank1) = 1 & boatLoc = bank1;
    maxstep: numAt(missionary, bank2) = 3 & numAt(cannibal, bank2) = 2 & numAt(bigCannibal, bank2) = 1 & boatLoc = bank2.

% SAMPLE QUERIES CHANGED? [CHANGED]
% Query 1: Attempt to cross the river with no one in the boat (unsatisfiable)
:- query
    0: numAt(missionary, bank1) = 3 & numAt(cannibal, bank1) = 2 & numAt(bigCannibal, bank1) = 1 & boatLoc = bank1;
    0: cross(boat);
    0: numCrossing(boat, missionary) = 0 & numCrossing(boat, cannibal) = 0 & numCrossing(boat, bigCannibal) = 0.

% Query 2: Cross the river with the bigCannibal alone from bank1 to bank2 (satisfiable)
:- query
    0: numAt(missionary, bank1) = 3 & numAt(cannibal, bank1) = 2 & numAt(bigCannibal, bank1) = 1 & boatLoc = bank1;
    0: cross(boat);
    0: numCrossing(boat, bigCannibal) = 1 & numCrossing(boat, missionary) = 0 & numCrossing(boat, cannibal) = 0.

% Query 3: Try to have bigCannibal cross with another person in the boat from bank1 to bank2 (unsatisfiable)
:- query
    0: numAt(missionary, bank1) = 3 & numAt(cannibal, bank1) = 2 & numAt(bigCannibal, bank1) = 1 & boatLoc = bank1;
    0: cross(boat);
    0: numCrossing(boat, bigCannibal) = 1 & numCrossing(boat, cannibal) = 1 & numCrossing(boat, missionary) = 0.

% Query 4: Try to cross the river with three people in the boat (unsatisfiable)
:- query
    0: numAt(missionary, bank1) = 3 & numAt(cannibal, bank1) = 2 & numAt(bigCannibal, bank1) = 1 & boatLoc = bank1;
    0: cross(boat);
    0: numCrossing(boat, missionary) = 1 & numCrossing(boat, cannibal) = 2 & numCrossing(boat, bigCannibal) = 0.

% Query 5: Attempt to have cannibals outnumber missionaries on the boat (satisfiable)
:- query
    0: numAt(missionary, bank1) = 3 & numAt(cannibal, bank1) = 2 & numAt(bigCannibal, bank1) = 1 & boatLoc = bank1;
    0: cross(boat);
    0: numCrossing(boat, missionary) = 0 & numCrossing(boat, cannibal) = 2 & numCrossing(boat, bigCannibal) = 0.