% PROGRAM CHANGED? [UNCHANGED]
% BC+ signature
:- sorts
    vessel;
    location;
    group;
    integer.


:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals :: group;
    0..10 :: integer.


:- variables
    V, V1, V2, V3, V4 :: vessel;
    L, L1, L2, L3, L4 :: location;
    G, G1, G2, G3, G4 :: group;
    N, N1, N2, N3, N4 :: integer;
    Bool, Bool1, Bool2, Bool3, Bool4 :: boolean.


:- constants
    cross(vessel) :: exogenousAction;
    numCrossing(vessel, group) :: attribute(integer) of cross(vessel);
    loc(vessel) :: inertialFluent(location);
    numOnBank(location, group) :: additiveFluent(integer).

% Constraints/rules

% 1. Crossing the river in the vessel causes the location of the vessel to change to the opposite bank.
cross(V) causes loc(V) = bank2 if loc(V) = bank1.
cross(V) causes loc(V) = bank1 if loc(V) = bank2.

% 2. Crossing the river in the vessel causes the number of people of each group on the departure bank to decrease by the number of people of that group crossing in the vessel.
cross(V) decrements numOnBank(L, G) by N if numCrossing(V, G) = N & loc(V) = L.

% 3. Crossing the river in the vessel causes the number of people of each group on the arrival bank to increase by the number of people of that group crossing in the vessel.
% 3.a If the vessel is at bank1, crossing increments numOnBank(bank2, G) by N if numCrossing(V, G) = N & loc(V) = bank1.
cross(V) increments numOnBank(bank2, G) by N if numCrossing(V, G) = N & loc(V) = bank1.

% 3.b If the vessel is at bank2, crossing increments numOnBank(bank1, G) by N if numCrossing(V, G) = N & loc(V) = bank2.
cross(V) increments numOnBank(bank1, G) by N if numCrossing(V, G) = N & loc(V) = bank2.

% 4. The vessel cannot cross the river with zero people on it.
nonexecutable cross(V) if N1 + N2 = 0 & N1 = numCrossing(V, missionaries) & N2 = numCrossing(V, cannibals).

% 5. The vessel cannot carry more than two people at once.
nonexecutable cross(V) if N1 + N2 > 2 & N1 = numCrossing(V, missionaries) & N2 = numCrossing(V, cannibals).

% 6. The number of people of each group crossing in the vessel cannot exceed the number of people of that group on the bank where the vessel is located.
nonexecutable cross(V) if N1 > N2 & N1 = numCrossing(V, G) & N2 = numOnBank(L, G) & loc(V) = L.

% 7. The number of people of each group crossing in the vessel cannot be negative.
nonexecutable cross(V) if N < 0 & N = numCrossing(V, G).

% 8. After crossing, on either bank, the number of cannibals cannot exceed the number of missionaries unless the number of missionaries on that bank is zero.
impossible N1 > N2 & N2 > 0 & N1 = numOnBank(L, cannibals) & N2 = numOnBank(L, missionaries).

% 9. During crossing, the number of cannibals crossing in the vessel cannot exceed the number of missionaries crossing in the vessel unless the number of missionaries crossing is zero.
nonexecutable cross(V) if N2 > N1 & N1 > 0 & N1 = numCrossing(V, missionaries) & N2 = numCrossing(V, cannibals).

% 10. The number of people of each group on either bank cannot be negative or exceed three.
impossible N < 0 & N = numOnBank(L, G).
impossible N > 3 & N = numOnBank(L, G).


% MAIN QUERY CHANGED? [UNCHANGED]
% Three missionaries and three cannibals are at location bank1. The boat is at location bank1. Find a plan so that all missionaries and all cannibals are at location bank2. 
:- query
    0: numOnBank(bank1, missionaries) = 3 & numOnBank(bank1, cannibals) = 3 & numOnBank(bank2, missionaries) = 0 & numOnBank(bank2, cannibals) = 0 & loc(boat) = bank1;
    maxstep: numOnBank(bank2, missionaries) = 3 & numOnBank(bank2, cannibals) = 3.


% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 1: Have one missionary and one cannibal cross from bank1 to bank2 in the boat (satisfiable)
:- query
    0: numOnBank(bank1, missionaries) = 3 & numOnBank(bank1, cannibals) = 3 & loc(boat) = bank1 & numOnBank(bank2, missionaries) = 0 & numOnBank(bank2, cannibals) = 0;
    0: cross(boat) & numCrossing(boat, missionaries) = 1 & numCrossing(boat, cannibals) = 1.

% Query 2: Try to have two missionaries and one cannibal cross from bank1 to bank2 in the boat (unsatisfiable)
:- query
    0: numOnBank(bank1, missionaries) = 3 & numOnBank(bank1, cannibals) = 3 & loc(boat) = bank1 & numOnBank(bank2, missionaries) = 0 & numOnBank(bank2, cannibals) = 0;
    0: cross(boat) & numCrossing(boat, missionaries) = 2 & numCrossing(boat, cannibals) = 1.

% Query 3: Have one cannibal cross from bank1 to bank2 alone in the boat (satisfiable)
:- query
    0: numOnBank(bank1, missionaries) = 3 & numOnBank(bank1, cannibals) = 3 & loc(boat) = bank1 & numOnBank(bank2, missionaries) = 0 & numOnBank(bank2, cannibals) = 0;
    0: cross(boat) & numCrossing(boat, missionaries) = 0 & numCrossing(boat, cannibals) = 1.

% Query 4: Try to have one missionary cross from bank1 to bank2 alone in the boat (unsatisfiable)
:- query
    0: numOnBank(bank1, missionaries) = 3 & numOnBank(bank1, cannibals) = 3 & loc(boat) = bank1 & numOnBank(bank2, missionaries) = 0 & numOnBank(bank2, cannibals) = 0;
    0: cross(boat) & numCrossing(boat, missionaries) = 1 & numCrossing(boat, cannibals) = 0.

% Query 5: Try to have the boat cross from bank1 to bank2 with no people in it (unsatisfiable)
:- query
    0: numOnBank(bank1, missionaries) = 3 & numOnBank(bank1, cannibals) = 3 & loc(boat) = bank1 & numOnBank(bank2, missionaries) = 0 & numOnBank(bank2, cannibals) = 0;
    0: cross(boat) & numCrossing(boat, missionaries) = 0 & numCrossing(boat, cannibals) = 0.