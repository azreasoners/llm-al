:- sorts
    set;
    group;
    location;
    integer.


:- objects
    s1, s2 :: set;
    missionaries, cannibals :: group;
    bank1, bank2 :: location;
    0..10 :: integer.


:- variables
    S, S1, S2 :: set;
    G, G1, G2 :: group;
    L, L1, L2 :: location;
    N, N1, N2, N3, N4 :: integer.


:- constants
    cross(set) :: exogenousAction;
    dest(set) :: attribute(location) of cross(set);
    numCrossing(set, group) :: attribute(integer) of cross(set);
    boatLoc(set) :: inertialFluent(location);
    numAt(set, group, location) :: additiveFluent(integer).


% constraints/rules

% 1. The crossing action of a set causes the boat's location for that set to become the destination of the crossing action for that set.
cross(S) causes boatLoc(S) = L if dest(S) = L.

% 2. The crossing action of a set causes the number of people of each group at the destination location for that set to increase by the number of people of that group crossing in that set's boat.
cross(S) increments numAt(S, G, L) by N if dest(S) = L & numCrossing(S, G) = N.

% 3. The crossing action of a set causes the number of people of each group at the origin location for that set to decrease by the number of people of that group crossing in that set's boat.
cross(S) decrements numAt(S, G, L) by N if boatLoc(S) = L & numCrossing(S, G) = N.

% 4. The origin location of the crossing action for a set is the boat's location for that set.
% (Implicitly handled in rules 2 and 3 using boatLoc(S) as the origin location.)

% 5. The crossing action of a set is not executable if the boat's location for that set is equal to the destination location of the crossing action for that set.
nonexecutable cross(S) if boatLoc(S) = dest(S).

% 6. The crossing action of a set is not executable if the total number of people crossing in that set's boat is zero.
nonexecutable cross(S) if numCrossing(S, missionaries) = N1 & numCrossing(S, cannibals) = N2 & N1 + N2 = 0.

% 7. The total number of people crossing in a set's boat cannot exceed 2.
nonexecutable cross(S) if numCrossing(S, missionaries) = N1 & numCrossing(S, cannibals) = N2 & N1 + N2 > 2.

% 8. The crossing action of a set is not executable if the number of people of any group crossing in that set's boat is less than zero.
nonexecutable cross(S) if numCrossing(S, G) = N & N < 0.

% 9. The crossing action of a set is not executable if the number of people of any group crossing in that set's boat exceeds the number of people of that group at the origin location for that set.
nonexecutable cross(S) if numCrossing(S, G) = N1 & numAt(S, G, L) = N2 & boatLoc(S) = L & N1 > N2.

% 10. The crossing action of a set is not executable if the number of people of any group at any location for that set would become negative after the crossing.
nonexecutable cross(S) if numAt(S, G, L) = N2 & boatLoc(S) = L & numCrossing(S, G) = N1 & N2 - N1 < 0.

% 11. The number of people of any group at any location for a set cannot be negative.
always numAt(S, G, L) >= 0.

% 12. The crossing action of a set is not executable if, after the crossing, at any location for that set, the number of cannibals would exceed the number of missionaries, unless the number of missionaries at that location is zero.
% (This constraint is complex to express directly in BC+ and may require additional rules or an advanced modeling approach.)

% 13. The crossing action of a set is not executable if the number of cannibals crossing in that set's boat exceeds the number of missionaries crossing in that set's boat, unless the number of missionaries crossing is zero.
nonexecutable cross(S) if numCrossing(S, missionaries) = N_cm & numCrossing(S, cannibals) = N_cc & N_cm > 0 & N_cc > N_cm.

% 14. The total number of people of each group in a set is constant and equal to 3.
always numAt(S, G, bank1) + numAt(S, G, bank2) = 3.

% 15. The total number of people of any group at both locations for a set remains constant.
% (This is already ensured by rule 14.)

% 16. The crossing action of one set does not affect the states or variables of the other set.
% (This is implicitly handled as variables and constants are indexed by set S.)

% 17. The boat's location for one set does not affect the boat's location for another set.
% (Variables are specific to each set S.)

% 18. The number of people of any group at any location for one set does not affect the number of people of any group at any location for another set.
% (Variables and constants are specific to each set S.)

% 19. The sets are independent and do not interact with each other.
% (Implicitly ensured by the use of set-specific variables and constants.)


% query

:- query
    0: numAt(s1, missionaries, bank1) = 3 & numAt(s1, cannibals, bank1) = 3 & numAt(s1, missionaries, bank2) = 0 & numAt(s1, cannibals, bank2) = 0 & boatLoc(s1) = bank1 &
       numAt(s2, missionaries, bank1) = 3 & numAt(s2, cannibals, bank1) = 3 & numAt(s2, missionaries, bank2) = 0 & numAt(s2, cannibals, bank2) = 0 & boatLoc(s2) = bank1;
    maxstep: numAt(s1, missionaries, bank2) = 3 & numAt(s1, cannibals, bank2) = 3 & boatLoc(s1) = bank2 &
             numAt(s2, missionaries, bank2) = 3 & numAt(s2, cannibals, bank2) = 3 & boatLoc(s2) = bank2.