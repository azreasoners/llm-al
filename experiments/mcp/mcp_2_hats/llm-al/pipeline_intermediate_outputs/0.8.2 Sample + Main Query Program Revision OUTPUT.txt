% PROGRAM CHANGED? [CHANGED]
:- sorts
    vessel;
    location;
    member >> missionary, cannibal;
    hat;
    integer.

% Object declarations

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    m1, m2, m3 :: missionary;
    c1, c2, c3 :: cannibal;
    hat1, hat2, hat3, hat4, hat5, hat6 :: hat;
    0..10 :: integer.

% Variable declarations

:- variables
    V, V1, V2 :: vessel;
    Loc, Loc1, Loc2 :: location;
    M, M1, M2, M3, M4, M5 :: member;
    Ms, Ms1, Ms2 :: missionary;
    Cs, Cs1, Cs2, Cs3 :: cannibal;
    H, H1, H2, H3, H4 :: hat;
    N, N1, N2, N3, N4 :: integer.

% Constant declarations

:- constants
    loc_member(member) :: inertialFluent(location);
    loc_vessel(vessel) :: inertialFluent(location);
    hasHat(member) :: inertialFluent(hat);
    cross(vessel) :: exogenousAction;
    onboard(vessel, member) :: attribute(boolean) of cross(vessel);
    exchangeHat(member, member) :: exogenousAction.

% Generated constraints

% 1. Crossing a vessel causes the vessel's location to change to the opposite bank.
cross(V) causes loc_vessel(V) = bank2 if loc_vessel(V) = bank1.
cross(V) causes loc_vessel(V) = bank1 if loc_vessel(V) = bank2.

% 2. Crossing a vessel causes the location of onboard members to change to the vessel's new location.
cross(V) causes loc_member(M) = bank2 if onboard(V, M) & loc_vessel(V) = bank1.
cross(V) causes loc_member(M) = bank1 if onboard(V, M) & loc_vessel(V) = bank2.

% 3. Members not onboard remain at their current location after the crossing.
% (No action needed since loc_member(M) is an inertial fluent.)

% 4. A member can be onboard the vessel only if they are at the same location as the vessel.
always (onboard(V, M) -> loc_member(M) = loc_vessel(V)).

% 5. Crossing a vessel is not executable if there are no members onboard.
nonexecutable cross(V) if 
    ~onboard(V, m1) & ~onboard(V, m2) & ~onboard(V, m3) &
    ~onboard(V, c1) & ~onboard(V, c2) & ~onboard(V, c3).

% 6. Crossing a vessel is not executable if more than two members are onboard.
nonexecutable cross(V) if onboard(V, M1) & onboard(V, M2) & onboard(V, M3) & M1 \= M2 & M1 \= M3 & M2 \= M3.

% 7. The cannibals may never outnumber the missionaries on either bank unless there are no missionaries on that bank.

% For bank1:
impossible
    loc_member(Ms1) = bank1 &
    (loc_member(Cs1) = bank1 & Ms1 \= Cs1) &
    (loc_member(Cs2) = bank1 & Cs1 \= Cs2 & Ms1 \= Cs2).

% Similarly for bank2:
impossible
    loc_member(Ms1) = bank2 &
    (loc_member(Cs1) = bank2 & Ms1 \= Cs1) &
    (loc_member(Cs2) = bank2 & Cs1 \= Cs2 & Ms1 \= Cs2).

% 8. The cannibals may never outnumber the missionaries on the boat unless there are no missionaries on the boat.

% On the boat:
nonexecutable cross(V) if
    onboard(V, Ms1) &
    onboard(V, Cs1) & Ms1 \= Cs1 &
    onboard(V, Cs2) & Cs1 \= Cs2 & Ms1 \= Cs2.

% 9. Exchanging hats between two members causes their hats to swap.
exchangeHat(M1, M2) causes hasHat(M1) = H2 if hasHat(M2) = H2.
exchangeHat(M1, M2) causes hasHat(M2) = H1 if hasHat(M1) = H1.

% 10. Exchanging hats is executable only if both members are at the same location.
nonexecutable exchangeHat(M1, M2) if loc_member(M1) \= loc_member(M2).

% 11. It is not executable to both cross a vessel and exchange hats at the same time.
nonexecutable cross(V) & exchangeHat(M1, M2).

% 12. It is not executable to exchange hats between a member and themselves.
nonexecutable exchangeHat(M1, M2) if M1 = M2.

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6;

    maxstep: loc_member(m1) = bank2 & loc_member(m2) = bank2 & loc_member(m3) = bank2 &
             loc_member(c1) = bank2 & loc_member(c2) = bank2 & loc_member(c3) = bank2.

% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 0: Check satisfiability of program signature and rules (ignores other queries). (satisfiable)
:- query = sat.

% Query 1: Test that crossing the boat with one person is allowed. Specifically, move one missionary (m1) from bank1 to bank2. (satisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6;
    0: cross(boat) & onboard(boat, m1);
    maxstep: loc_member(m1) = bank2.

% Query 2: Test that crossing the boat with no members onboard is not allowed. (unsatisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6;
    0: cross(boat);
    maxstep: loc_vessel(boat) = bank2.

% Query 3: Test that crossing the boat with three members onboard is not allowed. (unsatisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6;
    0: cross(boat) & onboard(boat, m1) & onboard(boat, m2) & onboard(boat, c1);
    maxstep: loc_vessel(boat) = bank2 &
             loc_member(m1) = bank2 & loc_member(m2) = bank2 & loc_member(c1) = bank2.

% Query 4: Test that moving one cannibal to bank2 is allowed and the constraints on bank1 are maintained. (satisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6;
    0: cross(boat) & onboard(boat, c1);
    maxstep: loc_member(c1) = bank2.

% Query 5: Test that exchanging hats between two members at different locations is not allowed. (unsatisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank2 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6;
    0: exchangeHat(m1, c1);
    maxstep: hasHat(m1) = H1 & hasHat(c1) = H2.