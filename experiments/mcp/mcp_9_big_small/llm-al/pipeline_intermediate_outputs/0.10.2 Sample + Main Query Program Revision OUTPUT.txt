% PROGRAM CHANGED? [CHANGED]
% BC+ Program

:- sorts
    missionary >> person;
    cannibal >> person;
    vessel;
    thing >> person, vessel;
    location;
    integer.

:- objects
    small_missionary, missionary1, missionary2 :: missionary;
    big_cannibal, cannibal1, cannibal2 :: cannibal;
    boat :: vessel;
    bank1, bank2 :: location;
    0..10 :: integer.

:- variables
    M, M1, M2, M3 :: missionary;
    C, C1, C2, C3 :: cannibal;
    P, P1, P2 :: person;
    Loc, Loc1, Loc2, NewLoc :: location;
    N_m, N_c :: integer.

:- constants
    cross1(person) :: exogenousAction;
    cross2(person, person) :: exogenousAction;
    loc(thing) :: inertialFluent(location);
    capacity(vessel) :: rigid(integer);
    num_missionaries(location) :: additiveFluent(integer);
    num_cannibals(location) :: additiveFluent(integer);
    num_missionaries(boat) :: additiveFluent(integer);
    num_cannibals(boat) :: additiveFluent(integer).

% Constraints and rules

% 1. The capacity of the boat is 2.
capacity(boat) = 2.

% 2. Action cross1(P): P crosses alone.
cross1(P) causes loc(boat) = NewLoc & loc(P) = NewLoc
    if loc(boat) = Loc & NewLoc \= Loc & loc(P) = Loc.

% 3. Action cross2(P1, P2): P1 and P2 cross together.
cross2(P1, P2) causes loc(boat) = NewLoc & loc(P1) = NewLoc & loc(P2) = NewLoc
    if loc(boat) = Loc & NewLoc \= Loc & loc(P1) = Loc & loc(P2) = Loc & P1 \= P2.

% 4. The crossing actions are not executable if any person is not at the same location as the boat.
nonexecutable cross1(P) if loc(P) \= loc(boat).
nonexecutable cross2(P1, P2) if loc(P1) \= loc(boat).
nonexecutable cross2(P1, P2) if loc(P2) \= loc(boat).

% 5. The crossing action is not executable if the boat capacity is exceeded.
nonexecutable cross2(P1, P2) if capacity(boat) < 2.

% 6. It is impossible for a person to be at two different locations at the same time.
impossible loc(P) = Loc1 & loc(P) = Loc2 & Loc1 \= Loc2.

% 7. The counts of missionaries and cannibals are updated when people move.

% For cross1(P)
% Before crossing: People get on the boat from the same location as the boat.
cross1(P) increments num_missionaries(boat) by 1 if P = M & loc(P) = loc(boat).
cross1(P) increments num_cannibals(boat) by 1 if P = C & loc(P) = loc(boat).
cross1(P) decrements num_missionaries(loc(boat)) by 1 if P = M & loc(P) = loc(boat).
cross1(P) decrements num_cannibals(loc(boat)) by 1 if P = C & loc(P) = loc(boat).

% After crossing: People get off the boat at NewLoc.
cross1(P) decrements num_missionaries(boat) by 1 if P = M.
cross1(P) decrements num_cannibals(boat) by 1 if P = C.
cross1(P) increments num_missionaries(NewLoc) by 1 if P = M.
cross1(P) increments num_cannibals(NewLoc) by 1 if P = C.

% For cross2(P1, P2)
% Before crossing: People get on the boat from the same location as the boat.
cross2(P1, P2) increments num_missionaries(boat) by 1 if P1 = M & loc(P1) = loc(boat).
cross2(P1, P2) increments num_cannibals(boat) by 1 if P1 = C & loc(P1) = loc(boat).
cross2(P1, P2) increments num_missionaries(boat) by 1 if P2 = M & loc(P2) = loc(boat).
cross2(P1, P2) increments num_cannibals(boat) by 1 if P2 = C & loc(P2) = loc(boat).
cross2(P1, P2) decrements num_missionaries(loc(boat)) by 1 if P1 = M & loc(P1) = loc(boat).
cross2(P1, P2) decrements num_cannibals(loc(boat)) by 1 if P1 = C & loc(P1) = loc(boat).
cross2(P1, P2) decrements num_missionaries(loc(boat)) by 1 if P2 = M & loc(P2) = loc(boat).
cross2(P1, P2) decrements num_cannibals(loc(boat)) by 1 if P2 = C & loc(P2) = loc(boat).

% After crossing: People get off the boat at NewLoc.
cross2(P1, P2) decrements num_missionaries(boat) by 1 if P1 = M.
cross2(P1, P2) decrements num_cannibals(boat) by 1 if P1 = C.
cross2(P1, P2) decrements num_missionaries(boat) by 1 if P2 = M.
cross2(P1, P2) decrements num_cannibals(boat) by 1 if P2 = C.
cross2(P1, P2) increments num_missionaries(NewLoc) by 1 if P1 = M.
cross2(P1, P2) increments num_cannibals(NewLoc) by 1 if P1 = C.
cross2(P1, P2) increments num_missionaries(NewLoc) by 1 if P2 = M.
cross2(P1, P2) increments num_cannibals(NewLoc) by 1 if P2 = C.

% 8. It is impossible for the number of cannibals to be greater than the number of missionaries at a location where there is at least one missionary.
impossible N_c > N_m & N_m > 0 & num_cannibals(Loc) = N_c & num_missionaries(Loc) = N_m.

% 9. It is impossible for the number of cannibals to be greater than the number of missionaries on the boat during crossing, where there is at least one missionary on the boat.
impossible N_c > N_m & N_m > 0 & num_cannibals(boat) = N_c & num_missionaries(boat) = N_m.

% 10. The boat cannot cross the river with nothing on it.
nonexecutable cross1(P) if P \= P.
nonexecutable cross2(P1, P2) if false.

% 11. The large cannibal cannot be left alone with the small missionary.
impossible loc(big_cannibal) = Loc & loc(small_missionary) = Loc & loc(missionary1) \= Loc & loc(missionary2) \= Loc.

% MAIN QUERY CHANGED? [CHANGED]
:- query
    0: loc(small_missionary) = bank1 & loc(missionary1) = bank1 & loc(missionary2) = bank1 &
       loc(big_cannibal) = bank1 & loc(cannibal1) = bank1 & loc(cannibal2) = bank1 & loc(boat) = bank1 &
       num_missionaries(bank1) = 3 & num_cannibals(bank1) = 3 &
       num_missionaries(bank2) = 0 & num_cannibals(bank2) = 0 & 
       num_missionaries(boat) = 0 & num_cannibals(boat) = 0;
    maxstep: loc(small_missionary) = bank2 & loc(missionary1) = bank2 & loc(missionary2) = bank2 &
             loc(big_cannibal) = bank2 & loc(cannibal1) = bank2 & loc(cannibal2) = bank2 &
             num_missionaries(bank2) = 3 & num_cannibals(bank2) = 3 &
             num_missionaries(bank1) = 0 & num_cannibals(bank1) = 0 &
             num_missionaries(boat) = 0 & num_cannibals(boat) = 0 &
             loc(boat) = bank2.

% SAMPLE QUERIES CHANGED? [CHANGED]
% Sample Query 1: Two people at the same location as the boat cross to the other bank (satisfiable)
:- query
    0: loc(missionary1) = bank1 & loc(cannibal1) = bank1 & loc(boat) = bank1 & 
       num_missionaries(bank1) = 1 & num_cannibals(bank1) = 1 & num_missionaries(bank2) = 0 & num_cannibals(bank2) = 0 &
       num_missionaries(boat) = 0 & num_cannibals(boat) = 0;
    0: cross2(missionary1, cannibal1).

% Sample Query 2: Attempt to cross two people when one of them is not at the same location as the boat (unsatisfiable)
:- query
    0: loc(missionary1) = bank1 & loc(cannibal1) = bank2 & loc(boat) = bank1 & 
       num_missionaries(bank1) = 1 & num_cannibals(bank1) = 0 & num_missionaries(bank2) = 0 & num_cannibals(bank2) = 1 &
       num_missionaries(boat) = 0 & num_cannibals(boat) = 0;
    0: cross2(missionary1, cannibal1).

% Sample Query 3: Attempt to cross when the boat is at a different location than the people (unsatisfiable)
:- query
    0: loc(missionary1) = bank1 & loc(cannibal1) = bank1 & loc(boat) = bank2 & 
       num_missionaries(bank1) = 1 & num_cannibals(bank1) = 1 & num_missionaries(bank2) = 0 & num_cannibals(bank2) = 0 &
       num_missionaries(boat) = 0 & num_cannibals(boat) = 0;
    0: cross2(missionary1, cannibal1).

% Sample Query 4: One person crosses alone (satisfiable)
:- query
    0: loc(cannibal2) = bank1 & loc(boat) = bank1 & num_cannibals(bank1) = 1 & num_missionaries(bank1) = 0 &
       num_cannibals(bank2) = 0 & num_missionaries(bank2) = 0 &
       num_cannibals(boat) = 0 & num_missionaries(boat) = 0;
    0: cross1(cannibal2).

% Sample Query 5: Attempt to cross when neither person is at the boat's location (unsatisfiable)
:- query
    0: loc(missionary2) = bank2 & loc(cannibal2) = bank2 & loc(boat) = bank1 & 
       num_missionaries(bank2) = 1 & num_cannibals(bank2) = 1 & num_missionaries(bank1) = 0 & num_cannibals(bank1) = 0 &
       num_missionaries(boat) = 0 & num_cannibals(boat) = 0;
    0: cross2(missionary2, cannibal2).