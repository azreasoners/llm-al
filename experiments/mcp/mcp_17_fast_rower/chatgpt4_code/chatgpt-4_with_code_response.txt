
ChatGPT

Analysis errored

python
Always show details

Copy code
def is_safe(m, c, boat_m, boat_c):
    """
    Check if the missionaries will not be eaten on either bank or on the boat.
    m: number of missionaries on the original bank
    c: number of cannibals on the original bank
    boat_m: missionaries on the boat
    boat_c: cannibals on the boat
    """
    # Check if boat conditions are met
    if boat_c > boat_m > 0:
        return False

    # Check conditions on both banks
    if m < c and m > 0:  # more cannibals than missionaries on bank1
        return False
    if (4 - m) < (4 - c) and (4 - m) > 0:  # more cannibals than missionaries on bank2
        return False

    return True


def search(state, path, solutions):
    """
    Recursively explore all possible states to solve the problem.
    state: (missionaries, cannibals, boat position)
    path: list of moves taken to reach current state
    solutions: list to store successful paths
    """
    # Unpack the state
    m, c, boat = state

    # Check for solution
    if (m, c, boat) == (0, 0, 1):
        solutions.append(path)
        return

    # Define possible moves
    moves = [(2, 0), (0, 2), (1, 1), (1, 0), (0, 1)]

    for move in moves:
        boat_m, boat_c = move
        if boat == 0:  # boat at bank1
            next_state = (m - boat_m, c - boat_c, 1)
        else:  # boat at bank2
            next_state = (m + boat_m, c + boat_c, 0)

        # Check if move is valid and safe
        if (0 <= next_state[0] <= 4 and 0 <= next_state[1] <= 4 and
                is_safe(*next_state) and next_state not in path):
            # Move the boat and continue searching
            search(next_state, path + [next_state], solutions)


def solve_missionaries_and_cannibals():
    initial_state = (4, 4, 0)  # 4 missionaries, 4 cannibals, boat at bank1
    solutions = []
    search(initial_state, [initial_state], solutions)
    return solutions

# Get the solutions for the missionaries and cannibals problem
solve_missionaries_and_cannibals()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[1], line 61
     58     return solutions
     60 # Get the solutions for the missionaries and cannibals problem
---> 61 solve_missionaries_and_cannibals()

Cell In[1], line 57, in solve_missionaries_and_cannibals()
     55 initial_state = (4, 4, 0)  # 4 missionaries, 4 cannibals, boat at bank1
     56 solutions = []
---> 57 search(initial_state, [initial_state], solutions)
     58 return solutions

Cell In[1], line 49, in search(state, path, solutions)
     45     next_state = (m + boat_m, c + boat_c, 0)
     47 # Check if move is valid and safe
     48 if (0 <= next_state[0] <= 4 and 0 <= next_state[1] <= 4 and
---> 49         is_safe(*next_state) and next_state not in path):
     50     # Move the boat and continue searching
     51     search(next_state, path + [next_state], solutions)

TypeError: is_safe() missing 1 required positional argument: 'boat_c'
It appears I forgot to adjust the is_safe function call to correctly pass the number of missionaries and cannibals on the boat depending on the boat's current position. Let's fix this by ensuring that we pass the boat missionaries and cannibals correctly and then try running the program again. ​​


Analysis errored

python
Always show details

Copy code
def is_safe(m, c, boat_m, boat_c, strong_missionary_on_boat):
    """
    Check if the missionaries will not be eaten on either bank or on the boat.
    m: number of missionaries on the original bank
    c: number of cannibals on the original bank
    boat_m: missionaries on the boat
    boat_c: cannibals on the boat
    strong_missionary_on_boat: True if the strong missionary is on the boat
    """
    # If strong missionary is on the boat, missionaries are safe on the boat
    if strong_missionary_on_boat:
        return True

    # Check if boat conditions are met
    if boat_c > boat_m > 0:
        return False

    # Check conditions on both banks
    if m < c and m > 0:  # more cannibals than missionaries on bank1
        return False
    if (4 - m) < (4 - c) and (4 - m) > 0:  # more cannibals than missionaries on bank2
        return False

    return True


def search(state, path, solutions):
    """
    Recursively explore all possible states to solve the problem.
    state: (missionaries, cannibals, boat position)
    path: list of moves taken to reach current state
    solutions: list to store successful paths
    """
    # Unpack the state
    m, c, boat = state

    # Check for solution
    if (m, c, boat) == (0, 0, 1):
        solutions.append(path)
        return

    # Define possible moves
    moves = [(2, 0), (0, 2), (1, 1), (1, 0), (0, 1)]

    for move in moves:
        boat_m, boat_c = move
        if boat == 0:  # boat at bank1
            next_state = (m - boat_m, c - boat_c, 1)
        else:  # boat at bank2
            next_state = (m + boat_m, c + boat_c, 0)

        # Determine if strong missionary is on the boat
        strong_missionary_on_boat = (boat_m == 1 and boat_c == 0)

        # Check if move is valid and safe
        if (0 <= next_state[0] <= 4 and 0 <= next_state[1] <= 4 and
                is_safe(*next_state, strong_missionary_on_boat) and next_state not in path):
            # Move the boat and continue searching
            search(next_state, path + [next_state], solutions)


def solve_missionaries_and_cannibals():
    initial_state = (4, 4, 0)  # 4 missionaries, 4 cannibals, boat at bank1
    solutions = []
    search(initial_state, [initial_state], solutions)
    return solutions

# Get the solutions for the missionaries and cannibals problem
solve_missionaries_and_cannibals()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[2], line 69
     66     return solutions
     68 # Get the solutions for the missionaries and cannibals problem
---> 69 solve_missionaries_and_cannibals()

Cell In[2], line 65, in solve_missionaries_and_cannibals()
     63 initial_state = (4, 4, 0)  # 4 missionaries, 4 cannibals, boat at bank1
     64 solutions = []
---> 65 search(initial_state, [initial_state], solutions)
     66 return solutions

Cell In[2], line 57, in search(state, path, solutions)
     53 strong_missionary_on_boat = (boat_m == 1 and boat_c == 0)
     55 # Check if move is valid and safe
     56 if (0 <= next_state[0] <= 4 and 0 <= next_state[1] <= 4 and
---> 57         is_safe(*next_state, strong_missionary_on_boat) and next_state not in path):
     58     # Move the boat and continue searching
     59     search(next_state, path + [next_state], solutions)

TypeError: is_safe() missing 1 required positional argument: 'strong_missionary_on_boat'
I seem to have made a mistake in passing the arguments to the is_safe function again. The unpacking of the state in the function call is incorrect, leading to missing arguments. Let me correct this and ensure that we properly pass the state and the indicator for whether the strong missionary is on the boat. Let's fix this and try running the code again. ​​


Analyzed

python
Always show details

Copy code
def is_safe(m, c, boat_m, boat_c, strong_missionary_on_boat):
    """
    Check if the missionaries will not be eaten on either bank or on the boat.
    m: number of missionaries on the original bank
    c: number of cannibals on the original bank
    boat_m: missionaries on the boat
    boat_c: cannibals on the boat
    strong_missionary_on_boat: True if the strong missionary is on the boat
    """
    # If strong missionary is on the boat, missionaries are safe on the boat
    if strong_missionary_on_boat:
        return True

    # Check if boat conditions are met
    if boat_c > boat_m > 0:
        return False

    # Check conditions on both banks
    if m < c and m > 0:  # more cannibals than missionaries on bank1
        return False
    if (4 - m) < (4 - c) and (4 - m) > 0:  # more cannibals than missionaries on bank2
        return False

    return True

def search(state, path, solutions):
    """
    Recursively explore all possible states to solve the problem.
    state: (missionaries, cannibals, boat position)
    path: list of moves taken to reach current state
    solutions: list to store successful paths
    """
    # Unpack the state
    m, c, boat = state

    # Check for solution
    if (m, c, boat) == (0, 0, 1):
        solutions.append(path)
        return

    # Define possible moves
    moves = [(2, 0), (0, 2), (1, 1), (1, 0), (0, 1)]

    for move in moves:
        boat_m, boat_c = move
        if boat == 0:  # boat at bank1
            next_state = (m - boat_m, c - boat_c, 1)
        else:  # boat at bank2
            next_state = (m + boat_m, c + boat_c, 0)

        # Determine if strong missionary is on the boat
        strong_missionary_on_boat = (boat_m == 1 and boat_c == 0)

        # Check if move is valid and safe
        if (0 <= next_state[0] <= 4 and 0 <= next_state[1] <= 4 and
                is_safe(next_state[0], next_state[1], boat_m, boat_c, strong_missionary_on_boat) and next_state not in path):
            # Move the boat and continue searching
            search(next_state, path + [next_state], solutions)

def solve_missionaries_and_cannibals():
    initial_state = (4, 4, 0)  # 4 missionaries, 4 cannibals, boat at bank1
    solutions = []
    search(initial_state, [initial_state], solutions)
    return solutions

# Get the solutions for the missionaries and cannibals problem
solve_missionaries_and_cannibals()
Result
[]
It seems that no solutions were found for the missionaries and cannibals problem with the current implementation. This might be due to overly restrictive conditions or a possible error in logic handling. I'll review and adjust the implementation, particularly focusing on how the boat moves and the conditions checked for safety. Let's refine this and try once more. ​​


Analyzed

python
Always show details

Copy code
def is_safe(m, c, strong_missionary_on_boat):
    """
    Check if the missionaries will not be eaten on either bank.
    m: number of missionaries on the original bank
    c: number of cannibals on the original bank
    strong_missionary_on_boat: True if the strong missionary is on the boat
    """
    # If strong missionary is on the boat, missionaries are safe
    if strong_missionary_on_boat:
        return True

    # Check conditions on both banks
    if m < c and m > 0:  # more cannibals than missionaries on bank1
        return False
    if (4 - m) < (4 - c) and (4 - m) > 0:  # more cannibals than missionaries on bank2
        return False

    return True


def search(state, path, solutions):
    """
    Recursively explore all possible states to solve the problem.
    state: (missionaries, cannibals, boat position)
    path: list of moves taken to reach current state
    solutions: list to store successful paths
    """
    m, c, boat = state  # Unpack the state

    # Check for solution
    if (m, c, boat) == (0, 0, 1):
        solutions.append(path)
        return

    # Define possible moves
    moves = [(2, 0), (0, 2), (1, 1), (1, 0), (0, 1)]

    for move in moves:
        boat_m, boat_c = move
        strong_missionary_on_boat = boat_m > 0 and boat_m >= boat_c

        if boat == 0:  # boat at bank1
            next_state = (m - boat_m, c - boat_c, 1)
        else:  # boat at bank2
            next_state = (m + boat_m, c + boat_c, 0)

        # Check if move is valid and safe
        if (0 <= next_state[0] <= 4 and 0 <= next_state[1] <= 4 and
                is_safe(next_state[0], next_state[1], strong_missionary_on_boat) and next_state not in path):
            # Move the boat and continue searching
            search(next_state, path + [next_state], solutions)


def solve_missionaries_and_cannibals():
    initial_state = (4, 4, 0)  # 4 missionaries, 4 cannibals, boat at bank1
    solutions = []
    search(initial_state, [initial_state], solutions)
    return solutions

# Get the solutions for the missionaries and cannibals problem
solve_missionaries_and_cannibals()
Result
),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 3, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 3, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 3, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 3, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 3, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (1, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (0, 2, 1),
  (0, 3, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (2, 0, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 1, 0),
  (2, 1, 1),
  (2, 2, 0),
  (1, 1, 1),
  (2, 1, 0),
  (1, 0, 1),
  (1, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 0, 0),
  (1, 0, 1),
  (2, 1, 0),
  (0, 1, 1),
  (1, 1, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 0, 0),
  (1, 0, 1),
  (2, 1, 0),
  (0, 1, 1),
  (0, 2, 0),
  (0, 0, 1)],
 [(4, 4, 0),
  (2, 4, 1),
  (3, 4, 0),
  (1, 4, 1),
  (2, 4, 0),
  (0, 4, 1),
  (1, 4, 0),
  (0, 3, 1),
  (2, 3, 0),
  (1, 2, 1),
  (3, 2, 0),
  (2, 2, 1),
  (3, 3, 0),
  (2, 3, 1),
  (4, 3, 0),
  (3, 2, 1),
  (4, 2, 0),
  (4, 0, 1),
  (4, 1, 0),
  (3, 0, 1),
  (4, 0, 0),
  (2, 0, 1),
  (3, 0, 0),
  (1, 0, 