% PROGRAM CHANGED? [UNCHANGED]
% BC+ signature
:- sorts
    vessel;
    location;
    group;
    integer.

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals :: group;
    0..3 :: integer.

:- variables
    Loc, Loc1, Loc2 :: location;
    NM, NC, N :: integer;
    G :: group.

:- constants
    cross(integer, integer) :: exogenousAction;
    % The action cross(NM, NC) represents crossing the river with NM missionaries and NC cannibals.

    numAt(group, location) :: additiveFluent(integer);
    boatAt :: inertialFluent(location).

% Generated constraints

% Crossing causes the boat to be at the other bank.
cross(NM, NC) causes boatAt = Loc2 if boatAt = Loc1 & ((Loc1 = bank1 & Loc2 = bank2) | (Loc1 = bank2 & Loc2 = bank1)).

% Crossing decrements the number of missionaries and cannibals at the departing bank.
cross(NM, NC) decrements numAt(missionaries, boatAt) by NM.
cross(NM, NC) decrements numAt(cannibals, boatAt) by NC.

% Crossing increments the number of missionaries and cannibals at the arriving bank.
cross(NM, NC) increments numAt(missionaries, Loc2) by NM if boatAt = Loc1 & ((Loc1 = bank1 & Loc2 = bank2) | (Loc1 = bank2 & Loc2 = bank1)).
cross(NM, NC) increments numAt(cannibals, Loc2) by NC if boatAt = Loc1 & ((Loc1 = bank1 & Loc2 = bank2) | (Loc1 = bank2 & Loc2 = bank1)).

% Constraints/Non-executable actions

% Crossing is not executable if the total number crossing is zero.
nonexecutable cross(NM, NC) if NM + NC = 0.

% Crossing is not executable if the total number crossing exceeds 2.
nonexecutable cross(NM, NC) if NM + NC > 2.

% Crossing is not executable if NM or NC is negative.
nonexecutable cross(NM, NC) if NM < 0.
nonexecutable cross(NM, NC) if NC < 0.

% Crossing is not executable if the number of missionaries crossing exceeds the number at the departing bank.
nonexecutable cross(NM, NC) if N = numAt(missionaries, boatAt) & NM > N.

% Similarly for cannibals.
nonexecutable cross(NM, NC) if N = numAt(cannibals, boatAt) & NC > N.

% Crossing is not executable if missionaries attempt to cross alone (missionaries cannot row).
nonexecutable cross(NM, NC) if NM > 0 & NC = 0.

% Crossing is not executable if cannibals outnumber missionaries on the boat (unless no missionaries are crossing).
nonexecutable cross(NM, NC) if NM > 0 & NC > NM.

% Cannibals cannot outnumber missionaries on any bank unless there are no missionaries on that bank.
always numAt(cannibals, Loc) <= numAt(missionaries, Loc) | numAt(missionaries, Loc) = 0.

% MAIN QUERY CHANGED? [CHANGED]
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 & boatAt = bank1;
    maxstep: 11;
    maxstep: numAt(missionaries, bank2) = 3 & numAt(cannibals, bank2) = 3 & numAt(missionaries, bank1) = 0 & numAt(cannibals, bank1) = 0.

% SAMPLE QUERIES CHANGED? [CHANGED]
% Query 1: Two cannibals cross from bank1 to bank2 (satisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & boatAt = bank1;
    0: cross(0, 2).

% Query 2: Two missionaries try to cross alone from bank1 to bank2 (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & boatAt = bank1;
    0: cross(2, 0).

% Query 3: One missionary and one cannibal cross from bank1 to bank2 (satisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & boatAt = bank1;
    0: cross(1, 1).

% Query 4: One missionary crosses alone from bank1 to bank2, leaving missionaries outnumbered by cannibals on bank1 (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & boatAt = bank1;
    0: cross(1, 0).

% Query 5: Two cannibals and one missionary try to cross from bank1 to bank2 (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & boatAt = bank1;
    0: cross(1, 2).