Given a description of a problem, write knowledge about the domain that we would expect to represent in an action language BC+ program. These should represent logical constraints and cause and effect in the problem.

For example, a task about moving objects would involve some knowledge about what is required to move, what the effect of moving an object does, such as the location of the object changing or its previous location now being empty. These restrictions and effects are dependent on the context of the problem. Here we list some example problems and extract knowledge.

[Example 1]
Description:
A monkey wants to get a bunch of bananas hanging from the ceiling. He can reach the bananas by first pushing a box to the empty place under the bananas and then climbing on top of the box. The task is to come up with a plan for retrieving the bananas.
Some things to consider are the monkey, the bananas, the box, the location of objects, and the monkey's ability to move and push the box. Provide the relevant knowledge. Only use the terminology in the description/hint to write the knowledge.

Hint:
There are two main types of things: "things" and "location".

monkey, bananas, and box are things.
l1, l2, and l3 are locations.

Actions:
walk to a location
push box to a location
climb on the box
climb off the box
grasp the bananas

Additional constants:
loc(thing) - The location of something should stay the same unless explicitly changed, it is inertial. The location of a thing should be a location, therefore it will be declared as an inertialFluent(location).
hasBananas - The monkey having the bananas should stay the same unless explicitly changed, it is inertial. Since whether the monkey has bananas or not is either true or false, it will be declared as inertialFluent(boolean).
onBox - The monkey being on the box should stay the same unless explicitly changed, it is inertial. Since whether the monkey is on the box or not either true or false, it will be declared as inertialFluent(boolean).

BC+ signature:
:- sorts
    thing;
    location.

:- objects
    monkey,bananas,box :: thing;
    l1,l2,l3 :: location.

:- variables
    T, T1, T2 :: thing;
    Loc, Loc1, Loc2 :: location;
    Bool, Bool1, Bool2 :: boolean.

:- constants
    loc(thing) :: inertialFluent(location);
    hasBananas,onBox :: inertialFluent(boolean);
    walk(location) :: exogenousAction;
    pushBox(location) :: exogenousAction;
    climbOn :: exogenousAction;
    climbOff :: exogenousAction;
    graspBananas :: exogenousAction.

Generated knowledge:
% The location of the bananas is where the monkey is if the monkey has bananas.
% The location of the monkey is where the box is if the monkey is on the box.
% Walking to a location causes the monkey's location to change.
% Walking is not executable to a location if the monkey is already in that location.
% Walking is not executable if the monkey is on the box.
% Pushing the box to a location causes the location of the box to move.
% Pushing the box to a location causes the location f the monkey to move.
% Pushing the box is not executable to a location if the monkey is at that location
% Pushing the box is not executable if the monkey is on the box.
% Pushing the box is not executable if the location of the monkey is not the same as the location of the box.
% Climbing on the box causes the monkey to be on the box.
% Climbing on the box is not executable if the monkey is already on the box.
% Climbing on the box is not executable if the location of the monkey is not the same as the box.
% Climbing off of the box causes the monkey to not be on the box.
% Climbing off of the box is not executable if the monkey is not on the box.
% Grasping the bananas causes the monkey to have the bananas.
% Grasping the bananas is not executable if the monkey already has the bananas.
% Grasping the bananas is not executable if the monkey is not on the box.
% Grasping the bananas is not executable if the location of the monkey is not the same as the location of the bananas.
% It is not executable to both walk to a location and push the box to a location.
% It is not executable to both walk to a location and climb on the box.
% It is not executable to both push the box to a location and climb on the box.
% It is not executable to both climb off of the box and grasp the bananas.

[Example 2]
Description:
Blocks can be stacked on each other or directly on a table. The task is to stack blocks on each other in a specified order. Provide the relevant knowledge. Only use the terminology in the description/hint to write the knowledge.

Hint:
There are two main types of things: "block" and "loc".
"loc" includes "block".

b1, b2, b3, and b4 are blocks.
table is a loc.

Actions:
Moving a block to a location

Additional constants:
loc(block) - The location of a block remains the same unless explicitly changed, so it is inertial. The value of the location of a block is a location, so loc(block) is declared as inertialFluent(loc).

BC+ signature:
:- sorts
    loc >> block.
:- objects
    b1, b2, b3, b4 :: block;
    table :: loc.
:- constants
    loc(block) :: inertialFluent(loc);
    move(block, loc) :: exogenousAction.
:- variables
    B, B1, B2, B3, B4       :: block;
    L, L1, L2, L3, L4           :: loc;
    Bool, Bool1, Bool2, Bool3, Bool4 :: boolean.

Generated knowledge:
% It is impossible for two blocks to be at the same location.
% Moving a block causes it's location to be at that location.
% The move action is not executable if something is on the location to be moved to.
% The move action is not executable if something is on top of the block which is being moved.

[Problem]
Description:
Four missionaries and four cannibals shall cross a river in a boat which carries at most two people at once. The boat cannot cross the river with nothing on it. On either side, the cannibals may never outnumber the missionaries or the missionaries will be eaten. Also, the cannibals may never outnumber the missionaries on the boat or the missionaries will be eaten. Provide the relevant knowledge. Only use the terminology in the hint/description to write the knowledge.

Hint:
There are four types of objects: "vessel", "location", "group", and "integer".

boat is a vessel.
bank1 and bank2 are locations
missionaries and cannibals are groups
0..10 are integers.

Actions
Crossing in a vessel is an action.

BC+ description
Actions:

cross(Vessel) - Crossing the river in a vessel.

Constants:

loc(Vessel) - the current location of the vessel (inertial fluent)
numOn(Location, Group) - the number of people of Group on Location (additive fluent)
numMoving(Vessel, Group) - the number of people of Group moving in Vessel during the cross action (attribute of cross(Vessel))
movingTo(Vessel) - the location the vessel is moving to during the cross action (attribute of cross(Vessel))

BC+ Signature:

:- sorts
    vessel;
    location;
    group;
    integer.

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals :: group;
    0..10 :: integer.

:- variables
    V, V1, V2, V3, V4 :: vessel;
    Loc, Loc1, Loc2, Loc3, Loc4 :: location;
    G, G1, G2, G3, G4 :: group;
    N, N1, N2, N3, N4 :: integer.

:- constants
    loc(vessel) :: inertialFluent(location);
    numOn(location, group) :: additiveFluent(integer);
    cross(vessel) :: exogenousAction;
    numMoving(vessel, group) :: attribute(integer) of cross(vessel);
    movingTo(vessel) :: attribute(location) of cross(vessel).

Generate the the knowledge relevant to this problem, ONLY using natural langauge. Do not mention any of the program within this knowledge, though the signature should be considered when writing the knowledge. Encapsulate it in three backticks like so:

```
% generated knowledge
% <knowledge #1>
% <knowledge #2>
...
```