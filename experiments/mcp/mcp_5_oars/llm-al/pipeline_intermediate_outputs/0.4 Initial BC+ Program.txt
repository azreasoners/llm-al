:- sorts
    vessel;
    location;
    group;
    integer.


:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals, oars :: group;
    0..10 :: integer.


:- variables
    V, V1, V2, V3, V4 :: vessel;
    L, L1, L2, L3, L4 :: location;
    G, G1, G2, G3, G4 :: group;
    N, N1, N2, N3, N4 :: integer.


:- constants
    cross(vessel) :: exogenousAction;
    loc(vessel) :: inertialFluent(location);
    capacity(vessel) :: inertialFluent(integer);
    numMissionariesAt(location) :: additiveFluent(integer);
    numCannibalsAt(location) :: additiveFluent(integer);
    numOarsAt(location) :: additiveFluent(integer);
    numMissionariesOn(vessel) :: attribute(integer) of cross(vessel);
    numCannibalsOn(vessel) :: attribute(integer) of cross(vessel);
    numOarsOn(vessel) :: attribute(integer) of cross(vessel).


% constraints/rules
% 1. The capacity of the boat is 2.
capacity(boat) = 2.

% 2. The boat cannot cross the river unless there is at least one person on the boat.
nonexecutable cross(boat) if N1 + N2 < 1 & N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat).

% 3. The boat cannot carry more people than its capacity allows.
nonexecutable cross(boat) if N1 + N2 > N3 & N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N3 = capacity(boat).

% 4. The number of oars on the boat must be at least one.
nonexecutable cross(boat) if N1 < 1 & N1 = numOarsOn(boat).

% 5. For the boat to cross with two people, the boat must have two oars on it.
nonexecutable cross(boat) if N1 + N2 = 2 & N3 < 2 & N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N3 = numOarsOn(boat).

% 6. The number of oars on the boat must be equal to the number of people on the boat during crossing.
always (N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N3 = numOarsOn(boat)) -> N1 + N2 = N3.

% 7. The number of oars on the boat cannot exceed the number of oars at the location of the boat.
nonexecutable cross(boat) if N1 > N2 & N1 = numOarsOn(boat) & N2 = numOarsAt(L) & L = loc(boat).

% 8. It is not allowed for the number of cannibals on the boat to exceed the number of missionaries on the boat if there are missionaries on the boat.
always (N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N1 > 0) -> N2 <= N1.

% 9. It is not allowed for the number of cannibals at any location to exceed the number of missionaries at that location if there are missionaries at that location.
impossible numCannibalsAt(L) > numMissionariesAt(L) & numMissionariesAt(L) > 0.

% 10. Define opposite banks.
opp(bank1, bank2).
opp(bank2, bank1).

% 11. Crossing the boat causes the location of the boat to change to the opposite bank.
cross(boat) causes loc(boat) = L2 if loc(boat) = L1 & opp(L1, L2).

% 12. Crossing the boat decreases the number of missionaries at the original location by the number of missionaries on the boat.
cross(boat) decrements numMissionariesAt(L1) by N if N = numMissionariesOn(boat) & L1 = loc(boat).

% 13. Crossing the boat increases the number of missionaries at the new location by the number of missionaries on the boat.
cross(boat) increments numMissionariesAt(L2) by N if N = numMissionariesOn(boat) & L1 = loc(boat) & opp(L1, L2).

% 14. Crossing the boat decreases the number of cannibals at the original location by the number of cannibals on the boat.
cross(boat) decrements numCannibalsAt(L1) by N if N = numCannibalsOn(boat) & L1 = loc(boat).

% 15. Crossing the boat increases the number of cannibals at the new location by the number of cannibals on the boat.
cross(boat) increments numCannibalsAt(L2) by N if N = numCannibalsOn(boat) & L1 = loc(boat) & opp(L1, L2).

% 16. Crossing the boat decreases the number of oars at the original location by the number of oars on the boat.
cross(boat) decrements numOarsAt(L1) by N if N = numOarsOn(boat) & L1 = loc(boat).

% 17. Crossing the boat increases the number of oars at the new location by the number of oars on the boat.
cross(boat) increments numOarsAt(L2) by N if N = numOarsOn(boat) & L1 = loc(boat) & opp(L1, L2).

% 18. It is impossible for the number of missionaries at a location to be negative.
impossible numMissionariesAt(L) < 0.

% 19. It is impossible for the number of cannibals at a location to be negative.
impossible numCannibalsAt(L) < 0.

% 20. It is impossible for the number of oars at a location to be negative.
impossible numOarsAt(L) < 0.


% query
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1 & capacity(boat) = 2;
    maxstep: numMissionariesAt(bank2) = 3 & numCannibalsAt(bank2) = 3.