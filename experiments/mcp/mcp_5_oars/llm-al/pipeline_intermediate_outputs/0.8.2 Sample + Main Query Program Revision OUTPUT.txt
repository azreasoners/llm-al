% PROGRAM CHANGED? [CHANGED]
% BC+ signature
:- sorts
    vessel;
    location;
    group;
    integer.


:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals, oars :: group;
    0..10 :: integer.


:- variables
    V, V1, V2, V3, V4 :: vessel;
    L, L1, L2, L3, L4 :: location;
    G, G1, G2, G3, G4 :: group;
    N, N1, N2, N3, N4 :: integer.


:- constants
    cross(vessel) :: exogenousAction;
    loc(vessel) :: inertialFluent(location);
    capacity(vessel) :: inertialFluent(integer);
    numMissionariesAt(location) :: additiveFluent(integer);
    numCannibalsAt(location) :: additiveFluent(integer);
    numOarsAt(location) :: additiveFluent(integer);
    numMissionariesOn(vessel) :: attribute(integer) of cross(vessel);
    numCannibalsOn(vessel) :: attribute(integer) of cross(vessel);
    numOarsOn(vessel) :: attribute(integer) of cross(vessel).

% Generated constraints
% 1. The capacity of the boat is 2.
capacity(boat) = 2.

% 2. The boat cannot cross the river unless there is at least one person on the boat.
nonexecutable cross(boat) if N1 + N2 < 1 & N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat).

% 3. The boat cannot carry more people than its capacity allows.
nonexecutable cross(boat) if N1 + N2 > N3 & N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N3 = capacity(boat).

% 4. The number of oars on the boat must be at least one.
nonexecutable cross(boat) if N1 < 1 & N1 = numOarsOn(boat).

% 5. For the boat to cross with two people, the boat must have two oars on it.
nonexecutable cross(boat) if N1 + N2 = 2 & N3 < 2 & N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N3 = numOarsOn(boat).

% 6. The number of oars on the boat must be equal to the number of people on the boat during crossing.
nonexecutable cross(boat) if N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N3 = numOarsOn(boat) & N1 + N2 \= N3.

% 7. The number of oars on the boat cannot exceed the number of oars at the location of the boat.
nonexecutable cross(boat) if N1 > N2 & N1 = numOarsOn(boat) & N2 = numOarsAt(L) & L = loc(boat).

% 8. It is not allowed for the number of cannibals on the boat to exceed the number of missionaries on the boat if there are missionaries on the boat.
nonexecutable cross(boat) if N1 = numMissionariesOn(boat) & N2 = numCannibalsOn(boat) & N1 > 0 & N2 > N1.

% 9. It is not allowed for the number of cannibals at any location to exceed the number of missionaries at that location if there are missionaries at that location.
impossible numCannibalsAt(L) > numMissionariesAt(L) & numMissionariesAt(L) > 0.

% 10. Crossing the boat causes the location of the boat to change to the opposite bank.
cross(boat) causes loc(boat) = L_new if loc(boat) = L_old & opposite_bank(L_old, L_new).

% 11. Crossing the boat decreases the number of missionaries at the original location by the number of missionaries on the boat.
cross(boat) decrements numMissionariesAt(L) by N if N = numMissionariesOn(boat) & L = loc(boat).

% 12. Crossing the boat increases the number of missionaries at the new location by the number of missionaries on the boat.
cross(boat) increments numMissionariesAt(L_new) by N if N = numMissionariesOn(boat) & loc(boat) = L_old & opposite_bank(L_old, L_new).

% 13. Crossing the boat decreases the number of cannibals at the original location by the number of cannibals on the boat.
cross(boat) decrements numCannibalsAt(L) by N if N = numCannibalsOn(boat) & L = loc(boat).

% 14. Crossing the boat increases the number of cannibals at the new location by the number of cannibals on the boat.
cross(boat) increments numCannibalsAt(L_new) by N if N = numCannibalsOn(boat) & loc(boat) = L_old & opposite_bank(L_old, L_new).

% 15. Crossing the boat decreases the number of oars at the original location by the number of oars on the boat.
cross(boat) decrements numOarsAt(L) by N if N = numOarsOn(boat) & L = loc(boat).

% 16. Crossing the boat increases the number of oars at the new location by the number of oars on the boat.
cross(boat) increments numOarsAt(L_new) by N if N = numOarsOn(boat) & loc(boat) = L_old & opposite_bank(L_old, L_new).

% 17. It is impossible for the number of missionaries at a location to be negative.
impossible numMissionariesAt(L) < 0.

% 18. It is impossible for the number of cannibals at a location to be negative.
impossible numCannibalsAt(L) < 0.

% 19. It is impossible for the number of oars at a location to be negative.
impossible numOarsAt(L) < 0.

% Definition of opposite_bank relation
opposite_bank(bank1, bank2).
opposite_bank(bank2, bank1).

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numMissionariesAt(bank2) = 0 & numCannibalsAt(bank2) = 0 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;
    maxstep: numMissionariesAt(bank2) = 3 & numCannibalsAt(bank2) = 3.

% SAMPLE QUERIES CHANGED? [CHANGED]
% Query 1: Attempting to cross the boat with no one on board. This should be unsatisfiable because the boat cannot cross without at least one person on it.

:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2)=1 & loc(boat) = bank1; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 0 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 1.

% Query 2: Attempting to cross the boat with three people on board. This should be unsatisfiable because the boat's capacity is 2.

:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2)=0 & loc(boat) = bank1;
    1: cross(boat);
    1: numMissionariesOn(boat) = 2 & numCannibalsOn(boat) = 1 & numOarsOn(boat) = 2.

% Query 3: Attempting to cross the boat with one person but zero oars on the boat. This should be unsatisfiable because the boat must have at least one oar to cross.

:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2)=1 & loc(boat) = bank1; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 0.

% Query 4: Attempting to cross the boat with two people but only one oar on the boat. This should be unsatisfiable because crossing with two people requires two oars.

:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2)=0 & loc(boat) = bank1; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 1 & numOarsOn(boat) = 1.

% Query 5: Successfully having the boat cross with one missionary and one oar on board from bank1 to bank2. This should be satisfiable.

:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2)=1 & loc(boat) = bank1; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 1;
    maxstep: numMissionariesAt(bank2) = 1 & numCannibalsAt(bank2) = 0 & numOarsAt(bank2) = 2 & loc(boat) = bank2.