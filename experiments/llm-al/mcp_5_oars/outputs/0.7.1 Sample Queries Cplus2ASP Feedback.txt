% Query 1: Attempting to cross the boat with no one on board. This should be unsatisfiable because the boat cannot cross without at least one person on it. (unsatisfiable)
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & 
       loc(boat) = bank1 & capacity(boat) = 2; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 0 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 1.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



% Query 2: Attempting to cross the boat with three people on board. This should be unsatisfiable because the boat's capacity is 2. (unsatisfiable)
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & 
       loc(boat) = bank1 & capacity(boat) = 2;
    1: cross(boat);
    1: numMissionariesOn(boat) = 2 & numCannibalsOn(boat) = 1 & numOarsOn(boat) = 2.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



% Query 3: Attempting to cross the boat with one person but zero oars on the boat. This should be unsatisfiable because the boat must have at least one oar to cross. (unsatisfiable)
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & 
       loc(boat) = bank1 & capacity(boat) = 2; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 0.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



% Query 4: Attempting to cross the boat with two people but only one oar on the boat. This should be unsatisfiable because crossing with two people requires two oars. (unsatisfiable)
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & 
       loc(boat) = bank1 & capacity(boat) = 2; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 1 & numOarsOn(boat) = 1.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



% Query 5: Successfully having the boat cross with one missionary and one oar on board from bank1 to bank2. This should be satisfiable. (satisfiable)
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & 
       loc(boat) = bank1 & capacity(boat) = 2; 
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 1;
    maxstep: numMissionariesAt(bank2) = 1 & numCannibalsAt(bank2) = 0 & numOarsAt(bank2) = 1 & loc(boat) = bank2.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.


% The query fails!

Each step is satisfiable up until 0, which has state/actions: "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & ", which should be satisfiable but they are not.

The last satisfiable state, correponding to this query is:
:- query
        0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & 
        maxstep :: 0.

is:

Solving...
UNSATISFIABLE
Models       : 0
Calls        : 1
Time         : 0.007s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.007s
No solution.



The actions and states are shown up until the last step in the query which is satisfiable. Consider why "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & " cannot be executed in step 0. Look at the last satisfiable state in the plan, and the rules which involve or may affect "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & ", which would cause it to be nonexecutable (if it is an action) or cause something that leads to the query being unsatisfiable.
    



:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1 & capacity(boat) = 2;
    maxstep: numMissionariesAt(bank2) = 3 & numCannibalsAt(bank2) = 3.


Cplus2ASP Output:

Solving...
Solution: 1
	

	0:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=3 numCannibalsAt(bank2)=3 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=3 numOarsAt(bank1)=1 numOarsAt(bank2)=1

SATISFIABLE
Models       : 1+

