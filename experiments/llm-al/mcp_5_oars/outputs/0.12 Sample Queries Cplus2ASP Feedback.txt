% Query 1: Attempting to cross the boat with no one on board. Should be unsatisfiable.
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;
    1: cross(boat);
    1: numMissionariesOn(boat) = 0 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 1.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.


% The query fails!

Each step is satisfiable up until 0, which has state/actions: "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;", which should be satisfiable but they are not.

The last satisfiable state, correponding to this query is:
:- query
        0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;
        maxstep :: 0.

is:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



The actions and states are shown up until the last step in the query which is satisfiable. Consider why "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;" cannot be executed in step 0. Look at the last satisfiable state in the plan, and the rules which involve or may affect "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;", which would cause it to be nonexecutable (if it is an action) or cause something that leads to the query being unsatisfiable.
    

% Query 2: Attempting to cross the boat with three people on board. Should be unsatisfiable.
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;
    1: cross(boat);
    1: numMissionariesOn(boat) = 2 & numCannibalsOn(boat) = 1 & numOarsOn(boat) = 2.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.


% The query fails!

Each step is satisfiable up until 0, which has state/actions: "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;", which should be satisfiable but they are not.

The last satisfiable state, correponding to this query is:
:- query
        0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;
        maxstep :: 0.

is:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



The actions and states are shown up until the last step in the query which is satisfiable. Consider why "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;" cannot be executed in step 0. Look at the last satisfiable state in the plan, and the rules which involve or may affect "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;", which would cause it to be nonexecutable (if it is an action) or cause something that leads to the query being unsatisfiable.
    

% Query 3: Attempting to cross the boat with one person but zero oars on the boat. Should be unsatisfiable.
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 0.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.


% The query fails!

Each step is satisfiable up until 0, which has state/actions: "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;", which should be satisfiable but they are not.

The last satisfiable state, correponding to this query is:
:- query
        0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;
        maxstep :: 0.

is:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



The actions and states are shown up until the last step in the query which is satisfiable. Consider why "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;" cannot be executed in step 0. Look at the last satisfiable state in the plan, and the rules which involve or may affect "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;", which would cause it to be nonexecutable (if it is an action) or cause something that leads to the query being unsatisfiable.
    

% Query 4: Attempting to cross the boat with two people but only one oar on the boat. Should be unsatisfiable.
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 1 & numOarsOn(boat) = 1.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.


% The query fails!

Each step is satisfiable up until 0, which has state/actions: "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;", which should be satisfiable but they are not.

The last satisfiable state, correponding to this query is:
:- query
        0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;
        maxstep :: 0.

is:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



The actions and states are shown up until the last step in the query which is satisfiable. Consider why "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;" cannot be executed in step 0. Look at the last satisfiable state in the plan, and the rules which involve or may affect "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 2 & numOarsAt(bank2) = 0 & loc(boat) = bank1;", which would cause it to be nonexecutable (if it is an action) or cause something that leads to the query being unsatisfiable.
    

% Query 5: Successfully crossing the boat with one missionary and one oar on board from bank1 to bank2. Should be satisfiable.
:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;
    1: cross(boat);
    1: numMissionariesOn(boat) = 1 & numCannibalsOn(boat) = 0 & numOarsOn(boat) = 1;
    maxstep: numMissionariesAt(bank2) = 1 & numCannibalsAt(bank2) = 0 & numOarsAt(bank2) = 2 & loc(boat) = bank2.

Cplus2ASP Output:

Solving...
UNSATISFIABLE
Models       : 0
No solution.


% The query fails!

Each step is satisfiable up until 0, which has state/actions: "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;", which should be satisfiable but they are not.

The last satisfiable state, correponding to this query is:
:- query
        0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;
        maxstep :: 0.

is:

Solving...
UNSATISFIABLE
Models       : 0
No solution.



The actions and states are shown up until the last step in the query which is satisfiable. Consider why "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;" cannot be executed in step 0. Look at the last satisfiable state in the plan, and the rules which involve or may affect "    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;", which would cause it to be nonexecutable (if it is an action) or cause something that leads to the query being unsatisfiable.
    




% Original natural language query: Three missionaries and three cannibals are at location bank1. There is an oar on bank1 and an oar on bank2. The boat is at location bank1. Find a plan so that all missionaries and all cannibals are at location bank2.

:- query
    0: numMissionariesAt(bank1) = 3 & numCannibalsAt(bank1) = 3 & numMissionariesAt(bank2) = 0 & numCannibalsAt(bank2) = 0 & numOarsAt(bank1) = 1 & numOarsAt(bank2) = 1 & loc(boat) = bank1;
    maxstep: numMissionariesAt(bank2) = 3 & numCannibalsAt(bank2) = 3.


Cplus2ASP Output:

Solving...
Solution: 1
	

	0:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=3 numCannibalsAt(bank2)=0 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=1 numOarsAt(bank2)=1

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=0 numOarsOn(boat)=1

	1:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=2 numCannibalsAt(bank2)=1 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=0 numOarsAt(bank2)=2

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	2:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=3 numCannibalsAt(bank2)=0 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=2 numOarsAt(bank2)=0

	ACTIONS:  cross(boat) numCannibalsOn(boat)=2 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	3:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=1 numCannibalsAt(bank2)=2 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=0 numOarsAt(bank2)=2

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	4:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=2 numCannibalsAt(bank2)=1 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=2 numOarsAt(bank2)=0

	ACTIONS:  cross(boat) numCannibalsOn(boat)=2 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	5:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=0 numCannibalsAt(bank2)=3 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=0 numOarsAt(bank2)=2

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	6:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=1 numCannibalsAt(bank2)=2 numMissionariesAt(bank1)=3 numMissionariesAt(bank2)=0 numOarsAt(bank1)=2 numOarsAt(bank2)=0

	ACTIONS:  cross(boat) numCannibalsOn(boat)=0 numMissionariesOn(boat)=2 numOarsOn(boat)=2

	7:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=1 numCannibalsAt(bank2)=2 numMissionariesAt(bank1)=1 numMissionariesAt(bank2)=2 numOarsAt(bank1)=0 numOarsAt(bank2)=2

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=1 numOarsOn(boat)=2

	8:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=2 numCannibalsAt(bank2)=1 numMissionariesAt(bank1)=2 numMissionariesAt(bank2)=1 numOarsAt(bank1)=2 numOarsAt(bank2)=0

	ACTIONS:  cross(boat) numCannibalsOn(boat)=0 numMissionariesOn(boat)=2 numOarsOn(boat)=2

	9:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=2 numCannibalsAt(bank2)=1 numMissionariesAt(bank1)=0 numMissionariesAt(bank2)=3 numOarsAt(bank1)=0 numOarsAt(bank2)=2

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	10:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=3 numCannibalsAt(bank2)=0 numMissionariesAt(bank1)=0 numMissionariesAt(bank2)=3 numOarsAt(bank1)=2 numOarsAt(bank2)=0

	ACTIONS:  cross(boat) numCannibalsOn(boat)=2 numMissionariesOn(boat)=0 numOarsOn(boat)=2

	11:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=1 numCannibalsAt(bank2)=2 numMissionariesAt(bank1)=0 numMissionariesAt(bank2)=3 numOarsAt(bank1)=0 numOarsAt(bank2)=2

	ACTIONS:  cross(boat) numCannibalsOn(boat)=0 numMissionariesOn(boat)=1 numOarsOn(boat)=2

	12:  capacity(boat)=2 loc(boat)=bank1 numCannibalsAt(bank1)=1 numCannibalsAt(bank2)=2 numMissionariesAt(bank1)=1 numMissionariesAt(bank2)=2 numOarsAt(bank1)=2 numOarsAt(bank2)=0

	ACTIONS:  cross(boat) numCannibalsOn(boat)=1 numMissionariesOn(boat)=1 numOarsOn(boat)=2

	13:  capacity(boat)=2 loc(boat)=bank2 numCannibalsAt(bank1)=0 numCannibalsAt(bank2)=3 numMissionariesAt(bank1)=0 numMissionariesAt(bank2)=3 numOarsAt(bank1)=0 numOarsAt(bank2)=2

SATISFIABLE
Models       : 1+

