% PROGRAM CHANGED? [CHANGED]

% Sort Declarations
:- sorts
    integer;
    vessel;
    location;
    member >> missionary, cannibal;
    hat.

% Object Declarations
:- objects
    0..3 :: integer;
    boat :: vessel;
    bank1, bank2 :: location;
    m1, m2, m3 :: missionary;
    c1, c2, c3 :: cannibal;
    hat1, hat2, hat3, hat4, hat5, hat6 :: hat.

% Variable Declarations
:- variables
    V :: vessel;
    L, L1, L2 :: location;
    M, M1, M2, M3 :: member;
    Ms1, Ms2, Ms3 :: missionary;
    Cs1, Cs2, Cs3 :: cannibal;
    Ms :: missionary;
    Cs :: cannibal;
    H, H1, H2 :: hat;
    N, N1, N2 :: integer.

% Constant Declarations
:- constants
    loc_member(member) :: inertialFluent(location);
    loc_vessel(vessel) :: inertialFluent(location);
    hasHat(member) :: inertialFluent(hat);
    cross(vessel) :: exogenousAction;
    onboard(vessel, member) :: attribute(boolean) of cross(vessel);
    exchangeHat(member, member) :: exogenousAction;
    numMissionariesAt(location) :: additiveFluent(integer);
    numCannibalsAt(location) :: additiveFluent(integer).

% Constraints

% Crossing a vessel causes the vessel's location to change to the opposite bank.
cross(V) causes loc_vessel(V) = bank2 if loc_vessel(V) = bank1.
cross(V) causes loc_vessel(V) = bank1 if loc_vessel(V) = bank2.

% Crossing a vessel causes the location of onboard members to change to the vessel's new location.
cross(V) causes loc_member(M) = bank2 if onboard(V, M) & loc_member(M) = bank1 & loc_vessel(V) = bank1.
cross(V) causes loc_member(M) = bank1 if onboard(V, M) & loc_member(M) = bank2 & loc_vessel(V) = bank2.

% Crossing a vessel decrements/increments the number of missionaries and cannibals at each bank.

% For missionaries:
cross(V) decrements numMissionariesAt(bank1) by 1 if onboard(V, Ms) & loc_member(Ms) = bank1 & loc_vessel(V) = bank1.
cross(V) increments numMissionariesAt(bank2) by 1 if onboard(V, Ms) & loc_member(Ms) = bank1 & loc_vessel(V) = bank1.

cross(V) decrements numMissionariesAt(bank2) by 1 if onboard(V, Ms) & loc_member(Ms) = bank2 & loc_vessel(V) = bank2.
cross(V) increments numMissionariesAt(bank1) by 1 if onboard(V, Ms) & loc_member(Ms) = bank2 & loc_vessel(V) = bank2.

% For cannibals:
cross(V) decrements numCannibalsAt(bank1) by 1 if onboard(V, Cs) & loc_member(Cs) = bank1 & loc_vessel(V) = bank1.
cross(V) increments numCannibalsAt(bank2) by 1 if onboard(V, Cs) & loc_member(Cs) = bank1 & loc_vessel(V) = bank1.

cross(V) decrements numCannibalsAt(bank2) by 1 if onboard(V, Cs) & loc_member(Cs) = bank2 & loc_vessel(V) = bank2.
cross(V) increments numCannibalsAt(bank1) by 1 if onboard(V, Cs) & loc_member(Cs) = bank2 & loc_vessel(V) = bank2.

% A member can be onboard the vessel only if they are at the same location as the vessel.
nonexecutable cross(V) if onboard(V, M) & loc_member(M) \= loc_vessel(V).

% Crossing a vessel is not executable if there are no members onboard.
nonexecutable cross(V) if 
    ~onboard(V, m1) & ~onboard(V, m2) & ~onboard(V, m3) &
    ~onboard(V, c1) & ~onboard(V, c2) & ~onboard(V, c3).

% Crossing a vessel is not executable if more than two members are onboard.
nonexecutable cross(V) if 
    onboard(V, M1) & onboard(V, M2) & onboard(V, M3) & M1 \= M2 & M1 \= M3 & M2 \= M3.

% The cannibals may never outnumber the missionaries on either bank unless there are no missionaries on that bank.
% We formalize this with the following impossible constraints:

% For any location L:
impossible numMissionariesAt(L) > 0 & numCannibalsAt(L) > numMissionariesAt(L).

% Exchanging hats between two members causes their hats to swap.
exchangeHat(M1, M2) causes hasHat(M1) = H2 if hasHat(M2) = H2.
exchangeHat(M1, M2) causes hasHat(M2) = H1 if hasHat(M1) = H1.

% Exchanging hats is executable only if both members are at the same location.
nonexecutable exchangeHat(M1, M2) if loc_member(M1) \= loc_member(M2).

% It is not executable to both cross a vessel and exchange hats at the same time.
nonexecutable cross(V) & exchangeHat(M1, M2).

% It is not executable to exchange hats between a member and themselves.
nonexecutable exchangeHat(M1, M2) if M1 = M2.


% MAIN QUERY CHANGED? [UNCHANGED]

:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6 &
       numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
       numCannibalsAt(bank1) = 3 & numCannibalsAt(bank2) = 0;

    maxstep: loc_member(m1) = bank2 & loc_member(m2) = bank2 & loc_member(m3) = bank2 &
             loc_member(c1) = bank2 & loc_member(c2) = bank2 & loc_member(c3) = bank2.


% SAMPLE QUERIES CHANGED? [UNCHANGED]

% Sample Query 1: Test that crossing the boat with one person is allowed. Specifically, move one missionary (m1) from bank1 to bank2. (satisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6 &
       numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
       numCannibalsAt(bank1) = 3 & numCannibalsAt(bank2) = 0;
    0: cross(boat) & onboard(boat, m1);
    maxstep: loc_member(m1) = bank2 &
             numMissionariesAt(bank1) = 2 & numMissionariesAt(bank2) = 1 &
             numCannibalsAt(bank1) = 3 & numCannibalsAt(bank2) = 0.

% Sample Query 2: Test that crossing the boat with no members onboard is not allowed. (unsatisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6 &
       numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
       numCannibalsAt(bank1) = 3 & numCannibalsAt(bank2) = 0;
    0: cross(boat);
    maxstep: loc_vessel(boat) = bank2.

% Sample Query 3: Test that crossing the boat with three members onboard is not allowed. (unsatisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6 &
       numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
       numCannibalsAt(bank1) = 3 & numCannibalsAt(bank2) = 0;
    0: cross(boat) & onboard(boat, m1) & onboard(boat, m2) & onboard(boat, c1);
    maxstep: loc_member(m1) = bank2 & loc_member(m2) = bank2 & loc_member(c1) = bank2.

% Sample Query 4: Test that moving one cannibal to bank2 is allowed and the constraints on bank1 are maintained. (satisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank1 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6 &
       numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
       numCannibalsAt(bank1) = 3 & numCannibalsAt(bank2) = 0;
    0: cross(boat) & onboard(boat, c1);
    maxstep: loc_member(c1) = bank2 &
             numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
             numCannibalsAt(bank1) = 2 & numCannibalsAt(bank2) = 1.

% Sample Query 5: Test that exchanging hats between two members at different locations is not allowed. (unsatisfiable)
:- query
    0: loc_member(m1) = bank1 & loc_member(m2) = bank1 & loc_member(m3) = bank1 &
       loc_member(c1) = bank2 & loc_member(c2) = bank1 & loc_member(c3) = bank1 &
       loc_vessel(boat) = bank1 &
       hasHat(m1) = hat1 & hasHat(m2) = hat2 & hasHat(m3) = hat3 &
       hasHat(c1) = hat4 & hasHat(c2) = hat5 & hasHat(c3) = hat6 &
       numMissionariesAt(bank1) = 3 & numMissionariesAt(bank2) = 0 &
       numCannibalsAt(bank1) = 2 & numCannibalsAt(bank2) = 1;
    0: exchangeHat(m1, c1);
    maxstep: hasHat(m1) = H1 & hasHat(c1) = H2.