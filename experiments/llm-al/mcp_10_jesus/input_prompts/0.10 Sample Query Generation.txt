Action language BC+ consists of (1) a signature, which is a finite set of propositional atoms, and (2) causal laws. An atom is true, false, or of the form c=v, where c is a constant, and v is an element in its domain. Constants c are divided into two groups: fluent constants and action constants. A formula is a propositional combination of atoms. A fluent formula is a formula such that all constants occurring in it are fluent constants. An action formula is a formula that contains at least one action constant and no fluent constants. 

For example, a fluent constant "loc" which represents the location of some object, may have a value from {l1, l2, l3}. To express the location is l2, one would write:
loc = l2.

Similarly, an action constant "drive" representing driving a car, may have a value from {true, false} (though in general actions can be non-boolean). To represent this, one could write:
drive = true.

For boolean constants c, c is shorthand for c=true, and ~c is shorthand for c=false. Thus "drive = true" can be represented simply as "drive". The standard logical operators are: "-" for negation, "&" for conjunction, "|" for disjunction, and "->" for implication.

Numeric values may combine with unary operators "-" (negative), "abs" (absolute value, e.g., abs(n)), and binary operators "+" (addition), "-" (subtraction), "*" (multiplication), "//" (floor division), and "mod" (modulus, e.g., n mod m). Comparison is done with "=" (equality), "\=" (inequality), "<" (less than), ">" (greater than), "<=" (less than or equal), and ">=" (greater than or equal).

An action description D is a set of causal laws that define a transition system, which can be represented as a directed graph. In this graph, the vertices correspond to states of the world, while the edges signify transitions between these states.

[CAUSAL LAWS: BASIC FORM]

In BC+, there are three types of basic laws: (1) static law, (2) action dynamic law, and (3) fluent dynamic law:

STATIC LAW:

	F if G,

where F and G are fluent formulas. This expresses that F is true if the formula G is true.

ACTION DYNAMIC LAW:

	F if G,

where F is an action formula and G is a formula. This expresses that action formula F is true if G is true.

FLUENT DYNAMIC LAW:

	F if G after H,

where F and G are fluent formulas, and H is a formula. This expresses that F is true if G is true after H is true.

[CAUSAL LAWS: SOME SHORTHAND ABBREVIATIONS]

BC+ allows several kinds of shorthand notation for the basic causal laws. These make it convenient to directly express commonsense knowledge.


CAUSES:

	a causes F if H,

where a is an action, F is a fluent formula, H is a formula, is shorthand for the fluent dynamic law:

	F after a & H.

This rule intuitively expresses that an action a causes some effect F if condition H is true.

IMPOSSIBLE:

	impossible F,

where F is a fluent formula, is shorthand for the static law:

	false if F.

This rule intuitively expresses that formula F should be false in every state.

NONEXECUTABLE:

	nonexecutable a_1 & ... & a_k if G,

where a_1 & ... & a_k are action constants and G is a formula, is shorthand for the fluent dynamic law:

	false if true after a_1 & ... & a_k & G.

This rule intuitively expresses that actions a_1 & ... & a_k all being true is not possible if G is true.

DEFAULT:

	default c=v if F,

where F is a fluent formula, stands for a static causal law. 

This intuitively expresses that by default c=v holds when F is true in the state. If there is evidence to the contrary, then c=v may not hold. 

	default c=v if F after G,

where F is a fluent formula, and G is a formula, and stands for a fluent dynamic law which intuitively expresses that by default c=v holds when F is true in the state and F was true in the previous state. If there is evidence to the contrary, then c=v may not hold.

ALWAYS:

	always F,

where F is a formula which can contain both fluent and action constants, is shorthand for the fluent dynamic law:

	false if true after ~F.

This rule intuitively expresses that every transition must satisfy F.

[SORT/OBJECT/VARIABLE/CONSTANT DECLARATION IMPLEMENTATION]

Action language BC+ is implemented in a program as follows. A BC+ program consists of a sort declaration, object declaration, variable declaration, constant declaration, along with a set of causal laws.

SORT DECLARATION:
A sort is a named set of elements which is used to specify the domain of each constant and variable. First the sort is declared
using a sort declaration statement and, later, is defined by adding objects to it in an object declaration statement.

Example:
:- sorts
    int;
    box.

This declares the sorts: int, and box.

A sort can also be a supersort, that is, a sort s can automatically include the objects within another sort s2, denoted s >> s2.

:- sorts
    package >> box.
This declares the sort package and box, where package is a supersort and includes the sort box.

OBJECT DECLARATION:
An object is a value in a sort which a constant can take. It is also used
in parameter lists to construct nested objects and sets of constants. 

Example:
:- objects
    1..3 :: int;
    o(int, int) :: box.

This declares 1,2, and 3 as objects within int, and the objects:
o(1, 1), o(1, 2), o(1, 3),
o(2, 1), o(2, 2), o(2, 3),
o(3, 1), o(3, 2), and o(3, 3),
as values within box.

Consider the following sort and object declaration:

:- sorts
    package >> box.

:- objects
    p1, p2 :: package;
    b1, b2, b3 :: box.

Since package is a supersort of box, there are 5 objects that are of sort package: p1, p2, b1, b2, and b3. There are only 3 objects of sort box: b1, b2 and b3.

VARIABLE DECLARATION:
A variable is a placeholder symbol which will be replaced with each object in its domain during grounding.

Example:
:- variables
    I, I1, I2 :: int;
    B, B1, B2 :: box.
This declares the variables I, I1, and I2 over the objects within int, and variables B, B1, and B2 range over the objects within box.
Variables are denoted as capital letters which are replaced with all possible values in the domain of their associated sort in a process called grounding.

CONSTANT DECLARATION:
Similar to object symbols, constants are defined within a constant declaration statement and have a base identifier, an optional list of parameter sort, and a sort which makes up the constant's domain. In addition, they have a constant declaration type, such as "exogenousAction" or "inertialFluent". Inertial fluents are common, and used for constants whose value persists through time unless affected otherwise.

Example:
:- constants
    p(int) :: inertialFluent(boolean);
    move(box) :: exogenousAction.
This declares the inertial fluent p which takes an int argument and is a boolean value, and the action move, which takes a box argument.

[CAUSAL LAWS BASIC FORM IMPLEMENTATION]

STATIC LAW EXAMPLE:

	F if G,

where F and G are fluent formulas, is written for example:

% The location of a person is the same as the car if the person is in the car.
loc(person)=L if inCar & loc(car)=L.

ACTION DYNAMIC LAW EXAMPLE:

	F if G,

where F is an action formula and G is a formula, is written for example:

% If A is assigned to location Loc, and it is ready, then moveTo(A) is true.
moveTo(A) if assigned(A) = Loc & ready(A),
where moveTo(A) is an action, and assigned(A) and ready(A) are fluent constants. Here moveTo is a boolean action constant.

FLUENT DYNAMIC LAW EXAMPLE:

	F if G after H,

where F and G are fluent formulas, and H is a formula, is written for example:

% If you enter the car after the car is unlocked, then you are in the car.
in(car) if unlocked(car) after enter(car).

[CAUSAL LAW SHORTHAND ABBREVIATIONS IMPLEMENTATION]

CAUSES EXAMPLE:

An expression of the form
	a causes F if H,

where a is an action, F is a fluent formula, H is a formula, is written for example:
% Driving the car to a location causes the car to be at that location of the car has gas.
drive(car, loc) causes location(car) = loc if hasGas(car)

IMPOSSIBLE EXAMPLE:

An expression of the form

	impossible F,

where F is a fluent formula, is written for example:

% The cat and mouse cannot be at the same location
impossible loc(cat)=Loc1 & loc(mouse) = Loc2 & Loc1=Loc2.

Recall that F in "impossible F" must be a fluent formula, meaning that F cannot contain action constants, including attributes.

The following two examples are incorrect, where drive(car) is an action, and numPassengers(car) and numDrivers(car) are attributes:
% The car cannot be driven if it has no fuel.
impossible drive(car) & fuel(car) = 0.

% The combined number of passengers and drivers cannot exceed 5.
impossible N1 + N2 > 5 & N1 = numPassengers(car) & N2 = numDrivers(car).

These are wrong because drive(car) is an action constant, and the attributes numPassengers and numDrivers are action constants, and they are in an impossible constraint.

NONEXECUTABLE EXAMPLE:

An expression of the form:

	nonexecutable a1 & a2 & ... & an if G, 

where a_1 & ... & a_k are action constants and G is a formula, is written for example:

% It is not permissible to drive a bus and a car if they are driving to the same location. 
nonexecutable driveCar(Loc1) & driveBus(Loc2) if Loc1=Loc2.

% It is not permissible to lift an object if it is heavy.
nonexecutable lift(object) if heavy(object).

On the other hand, the following:

nonexecutable lifted(object) if heavy(object),

is not allowed when lifted(object) is a fluent and not an action.

DEFAULT EXAMPLES:

An expression of the form

	default c=v if F,

where F is a fluent formula, is written for example as:

% By default, the power is on if the switch is turned.
default powerOn if switchTurned.

An expression of the form

	default c=v if F after G,

where F is a fluent formula, and G is a formula, is written for example as:

% The ferry will be on the right bank if it has gas after it was on the left bank, and no evidence suggests otherwise.
default ferry(right) if hasGas after ferry(left)

ALWAYS EXAMPLE:

	always F,

where F is a formula which can contain both fluent and action constants, is written for example:

% the number departing from a location is always less than or equal to the number at the location
always departing(Loc) <= numAt(Loc).

where departing/1 is an action constant and numAt/1 is a fluent.
Note: There should not be an "if" in a "always" rule, instead use "&".

Keep in mind that "always F" should be used for conditions which should be true for every transition.

[EXTENDED CONSTANT DECLARATION]
We can expand constant declaration to allow for attributes, additive fluents and additive actions.

ATTRIBUTES:
Attributes are types of action constants which are tied to actions, and given additional information about an action. For instance:

:- constants
    move(block) :: exogenousAction;
    destination(block) :: attribute(location) of move(block).

This declaration tells us that destination(block) is an attribute of the action of moving a block, which has value of location, representing the block's destination.

Important: Attributes should have as their first arguments, the same arguments (and in the same order) as the action which they are an attribute of.
For example, any attribute of the action "fly(airplane,location)" should have the form "attributeName(airplane,location,...)", after which the action arguments "airplane" and "location", can other arguments be listed.
An attribute which represents the number of passengers on board of a nationality can be written as:
onBoard(airplane,location,nationality) :: attribute(integer) of fly(airplane,location).

Where the following would be incorrect:
Incorrect: passengers(nationality) :: attribute(integer) of fly(airplane,location),
since passengers should instead have the arguments "airplane" and "location" before "nationality".

Important: If an attribute is ever declared, then the action it is an attribute of must have at least one argument.

For example, the above declaration would be incorrect if it was the following:

:- constants
    move :: exogenousAction;
    destination :: attribute(location) of move.

Here, since destination is an attribute of move, but move has no argument, this is wrong.

ADDITIVE FLUENTS AND ADDITIVE ACTIONS:

There are special constants additive fluents and additive actions, which are useful for modeling the effects of concurrent actions.
An additive fluent is a fluent (tied to states) with numerical values such that the effect of several concurrently executed actions on it can be computed by adding the effects of the individual actions.
An additive action constant (tied to a transition) is similar except that it can handle numeric values of concurrent actions during transitions.

With a buy and sell action, and numExchanged attribute of exchange, additive fluents and additive actions can be declared as follows:
:- constants
    buy(item) :: exogenousAction;
    sell(item) :: exogenousAction;
    exchange(item) :: exogenousAction;
    numExchanged(item) :: attribute(integer) of exchange(item); 
    inStock(item) :: additiveFluent(integer);
    netChange(item) :: additiveAction(integer).

inStock(item) represents the the number of an item in stock, which can be affected by both buy(item) and sell(item). netChange(item) represents the net number of an item which is exchanged or bought/sold during a given transition or event.

[EXTENDED CAUSAL LAW SHORTHAND ABBREVIATIONS: INCREMENT/DECREMENT LAWS IMPLEMENTATION]

INCREMENT/DECREMENT LAWS:
Additive fluents can only be updated in increment/decrement laws, which are expressed as:

    a increments c by v if G,

where a is an action, c is an additive fluent, v is an integer, and G is a fluent, is used to express that some additive fluent (c), should increase by some value v if G is true and action a happens.

Similarly:

    a decrements c by v if G,

is used to decrease the additive constant c by value v if G is true and action a happens.

Examples:
% buy(coin) increments has(coin) by N if howMany(coin,N).
% buy(coin) decrements has(money) by N*M if howMany(coin,N) & price(coin)=M.

Additive actions similarly are only updated in increment/decrement statements:

    a increments c by v if G.
    a decrements c by v if G.

where c is an additive action.
While additive fluents are used to describe state information, additive actions are about events/transitions. For example, suppose multiple actions can occur at once for a domain involving buying and selling, and the additive action netExchanged is declared:
% buy(coin) increments netExchanged(coin) by N if howMany(coin,N).
% sell(coin) decrements netExchanged(coin) by N if howMany(coin,N).

This is useful for tracking numerical values during a transition, which may be used, e.g., if there should never be a negative amount of net coins exchanged at a given time, then netExchanged(coin) can be used to construct such a law.

In general, if something causes something to increase/decrease, then we use increment/decrement. Updating the value of an additive fluent or action can only be done in an increment or decrement law (e.g., "a causes c=2" is not allowed if "c" represents an additive fluent/action).

[ARITHMETIC WITH ATTRIBUTES AND ADDITIVE CONSTANTS]
Attributes and additive actions should not occur in the operands of arithmetics such as addition, subtraction, multiplication, floor division, or modulus operators. They must be set to variables, and the variables must be used as the operands.

The following two rules are incorrect, where weight(truck,...) is an attribute:
% A truck cannot be driven if the combined weight of the cargo (C), passengers (P), and fuel (F), is greater than the truck's capacity.
nonexecutable drive(truck, P, C) if weight(truck, C) + weight(truck, P) + weight(truck, F) > capacity(truck).

% Driving the truck causes the weight of the truck's fuel to decrease by 15.
drive(truck, P, C) causes weight(truck, fuel) = weight(truck, fuel) - 15.

These are incorrect because the attributes weight(truck,...) are directly used in arithmetic.
Instead, these rules should be written as follows:
% A truck cannot be driven if the combined weight of the cargo (C), passengers (P), and fuel (F), is greater than the truck's capacity.
nonexecutable drive(truck, P, C) if N1 + N2 + N3 > capacity(truck) &  weight(truck, C) = N1 & weight(truck, P) = N2 & weight(truck, F) = N3.

% Driving the truck causes the weight of the truck's fuel to decrease by 15.
drive(truck, P, C) causes weight(truck, fuel) = N1 - 15 if N1 = weight(truck, fuel) & N2.

[RESTRICTION OF NESTED CONSTANTS]
A constant cannot appear as an argument of another constant. Instead, one can introduce a variable in place of a nested constant.

For example, the following is wrong since the (boolean) constant roadBlock(...), contains the nested constant loc(C):
nonexecutable move(C) if roadBlock(loc(C)).

Instead, loc(C) should be set to a variable, like the following:
nonexecutable move(C) if roadBlock(L) & L = loc(C).

[VARIABLE QUANTIFICATION]
When using "always F", make sure to quantify over variables if needed.
For example, say we want to express that the combined weight of passengers and the truck is less than the capacity of the truck. The following would be incorrect:
always weight(passengers) = N1 & weight(truck) = N2 & capacity(truck) = N3 & N1 + N2 < N3.

This is because of a quantification issue. This rule informally reads as "For all values N1, N2, and N3, the weight of the passengers is N1, the weight of the truck is N2, the capacity of the truck is N3, and N1 + N2 < N3." Since this will be grounded for every possible value that N1 can take it, there will be contradiction. Furthermore, the condition "N1 + N2 < N3" will obviously not hold over all possible values of the variables N1, N2, and N3.

To correctly write this, first set the variables in the antecedent of an implication:

always (weight(passengers) = N1 & weight(truck) = N2 & capacity(truck) = N3) -> N1 + N2 < N3.

This informally reads as "If the weight of the passengers is N1, the weight of the truck is N2, and the capacity of the truck is N3, then N1 + N2 < N3", and aligns with what we want to express.


QUERIES:
Queries have three components: an optional label, an optional maximum step which list formulas which should be true in the last step of the plan, and a set of constraint formulas to apply, each parametrized with the step at which they should be applied.
For example the following query represents an initial state and an action at step 0, and a set of constraints which should be met at the end of the plan.

:- query
	label :: test_query;
	0: loc(b1)=b2 & loc(b2)=b3 & loc(b3)=a & loc(b4)=b & loc(b5)=c;
	0: move(b1, b5);
	maxstep: loc(b5,c) & loc(b4,b5) & loc(b3,b4) & loc(b2,b3) & loc(b1,b2).

[INSTRUCTIONS]

Based on the problem description, and generated BC+ program. Generate some simple queries which can be used to make sure the program is working properly. For example, consider the following example.

[EXAMPLE 1]

Problem description:
Blocks can be stacked on top of each other or on a table. Blocks stacked on the table are in a tower.

There are two main types of things: loc and block.
loc includes block.

b1, b2, b3, and b4 are blocks.
table is a loc.

Actions
Moving a block to a location.

Initially, block b1 is on b2, b2 is on the table, b3 is on the table, and b4 is on b3. Find a plan so that block b1 is on b4, b2 is on b3, b3 is on b1, and b4 is on the table.

BC+ Program:
:- sorts
    loc >> block.
:- objects
    b1, b2, b3, b4 :: block;
    table :: loc.
:- constants
    loc(block) :: inertialFluent(loc);
    in_tower(block) :: inertialFluent(boolean);
    move(block, loc) :: exogenousAction.
:- variables
    B, B1, B2, B4 :: block;
    L, L1, L2, L3 :: loc.

% Two blocks cannot be at the same location. (Use loc(block). Since it is a fluent, we use impossible. Since we use impossible, we only use "&". "if" is not allowed). Use "\=" to differentiate B1 and B2.
impossible loc(B1) = B & loc(B2) = B & B1\=B2. 

% A block is in a tower if it's location is on the table. ("Static law")
in_tower(B) if loc(B) = table.

% A block is in a tower if it's location is on something that is in a tower. ("Static law")
in_tower(B) if loc(B) = B1 & in_tower(B1).

% Blocks don't float in the air. (Use in_tower(block). Since it is a fluent, we use impossible. Since we use impossible, we only use "&". "if" is not allowed)
impossible ~in_tower(B).

% Moving a block causes it's location to move to loc. ("causes" rule)
move(B,L) causes loc(B)=L.

% The move action is not permissible if something is on the location to be moved to. (Use move(block, loc). Since it is an action, we use nonexecutable.)
nonexecutable move(B,L) if loc(B1) = B.

% A block is in tower after it is in tower and it is on a block.
in_tower(B) after in_tower(B) and loc(B)=B1.

% By default, all blocks are in a tower.
default ~in_tower(B).

:- query
	0: loc(b1) = b2 & loc(b2) = table & loc(b3) = table & loc(b4)=b3);
	maxstep: loc(b1) = b4 & loc(b2) = b3 & loc(b3)=b1 & loc(b4) = table. 

Sample queries:

% Query 1: Move a single block which should be able to be moved. Block b4 should be able to be moved to the table. (satisfiable)
:- query
	0: loc(b1) = b2 & loc(b2) = table & loc(b3) = table & loc(b4)=b3);
    0: move(b4, table).

% Query 2: Move a single block which should NOT be able to be moved. Block b2 should not be able to be moved on top of block b3, since b1 is on top of b2. (unsatisfiable)
:- query
	0: loc(b1) = b2 & loc(b2) = table & loc(b3) = table & loc(b4)=b3);
    0: move(b2, b3).

% Query 3: End up in a state where two blocks are on the same block, which should NOT be allowed. Block b2 is on b1, let's try to move block b3 onto b1. (unsatisfiable)
:- query
	0: loc(b1) = b2 & loc(b2) = table & loc(b3) = table & loc(b4)=b3);
    0: move(b3, b1).

[PROBLEM]

Description:
Three missionaries and three cannibals shall cross a river in a boat which carries at most two people at once. The boat cannot cross the river with nothing on it. On either side, the cannibals may never outnumber the missionaries or the missionaries will be eaten. Also, the cannibals may never outnumber the missionaries on the boat or the missionaries will be eaten. The boat's capacity is 2. Additionally, one of the missionaries is Jesus, who can walk across by walking on the water.

BC+ description:
Actions:
cross(vessel) :: exogenousAction;
walk :: exogenousAction.

Constants:
numOnBank(group, location) :: additiveFluent(integer); // The number of people in group at a location.
jesusLocation :: inertialFluent(location); // The location of Jesus.
boatLocation :: inertialFluent(location); // The location of the boat.
loading(group) :: attribute(integer) of cross(vessel); // Number of people of group boarding the boat in the cross action.
jesusOnBoat :: attribute(boolean) of cross(vessel); // Whether Jesus is on the boat during the cross action.
capacity(vessel) :: rigid(integer); // The capacity of the boat.
totalNum(group) :: rigid(integer); // Total number of people in the group.

:- sorts
    vessel;
    location;
    group;
    integer;
    boolean.


:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals, jesus :: group;
    true, false :: boolean;
    0..10 :: integer.


:- variables
    Vessel, Vessel1, Vessel2, Vessel3, Vessel4 :: vessel;
    G, G1, G2, G3, G4 :: group;
    Loc, Loc1, Loc2, Loc3, Loc4 :: location;
    N, N1, N2, N3, N4 :: integer;
    Bool, Bool1, Bool2, Bool3, Bool4 :: boolean.


:- constants
    numOnBank(group, location) :: additiveFluent(integer);
    jesusLocation :: inertialFluent(location);
    boatLocation :: inertialFluent(location);
    cross(vessel) :: exogenousAction;
    loading(group) :: attribute(integer) of cross(vessel);
    jesusOnBoat :: attribute(boolean) of cross(vessel);
    walk :: exogenousAction;
    capacity(vessel) :: rigid(integer);
    totalNum(group) :: rigid(integer).


Rules/constraints to represent in BC+:
% constraints/rules
% 1. Crossing the boat causes the boatLocation to change to the opposite bank.
cross(Vessel) causes boatLocation = Loc2 if boatLocation = Loc1 & Loc2 = oppositeBank(Loc1).

% 2. Crossing the boat causes numOnBank(group, boatLocation) to decrease by loading(group) for each group.
cross(Vessel) decrements numOnBank(G, boatLocation) by N if loading(G) = N.

% 3. Crossing the boat causes numOnBank(group, opposite bank) to increase by loading(group) for each group.
cross(Vessel) increments numOnBank(G, Loc2) by N if boatLocation = Loc1 & Loc2 = oppositeBank(Loc1) & loading(G) = N.

% 4. Crossing the boat causes jesusLocation to change to the opposite bank if jesusOnBoat is true.
cross(Vessel) causes jesusLocation = Loc2 if boatLocation = Loc1 & jesusOnBoat = true & Loc2 = oppositeBank(Loc1).

% 5. Walking causes jesusLocation to change to the opposite bank.
walk causes jesusLocation = Loc2 if jesusLocation = Loc1 & Loc2 = oppositeBank(Loc1).

% 6a. Crossing the boat is not executable if jesusOnBoat is true and the total number of people loaded onto the boat (including Jesus) is less than one.
nonexecutable cross(Vessel) if N_total < 1 & N_total = N1 + N2 + 1 & loading(missionaries) = N1 & loading(cannibals) = N2 & jesusOnBoat = true.

% 6b. Crossing the boat is not executable if jesusOnBoat is false and the total number of people loaded onto the boat is less than one.
nonexecutable cross(Vessel) if N_total < 1 & N_total = N1 + N2 & loading(missionaries) = N1 & loading(cannibals) = N2 & jesusOnBoat = false.

% 7a. Crossing the boat is not executable if jesusOnBoat is true and the total number of people loaded onto the boat exceeds capacity(boat).
nonexecutable cross(Vessel) if N_total > Cap & N_total = N1 + N2 + 1 & loading(missionaries) = N1 & loading(cannibals) = N2 & capacity(Vessel) = Cap & jesusOnBoat = true.

% 7b. Crossing the boat is not executable if jesusOnBoat is false and the total number of people loaded onto the boat exceeds capacity(boat).
nonexecutable cross(Vessel) if N_total > Cap & N_total = N1 + N2 & loading(missionaries) = N1 & loading(cannibals) = N2 & capacity(Vessel) = Cap & jesusOnBoat = false.

% 8. Crossing the boat is not executable if loading(group) is greater than numOnBank(group, boatLocation) for any group.
nonexecutable cross(Vessel) if loading(G) > N & numOnBank(G, Loc) = N & boatLocation = Loc.

% 9a. Crossing the boat is not executable if cannibals loaded onto the boat exceed missionaries loaded onto the boat plus one if jesusOnBoat is true.
nonexecutable cross(Vessel) if N_c > N_m + 1 & loading(cannibals) = N_c & loading(missionaries) = N_m & jesusOnBoat = true.

% 9b. Crossing the boat is not executable if cannibals loaded onto the boat exceed missionaries loaded onto the boat if jesusOnBoat is false.
nonexecutable cross(Vessel) if N_c > N_m & loading(cannibals) = N_c & loading(missionaries) = N_m & jesusOnBoat = false.

% 10. Crossing the boat is not executable if cannibals remaining on the starting bank after loading would outnumber missionaries remaining on the starting bank plus one if jesusLocation is at the starting bank and jesusOnBoat is false.
nonexecutable cross(Vessel) if Rem_cannibals > Rem_missionaries + 1 & boatLocation = Loc & jesusLocation = Loc & jesusOnBoat = false & numOnBank(cannibals, Loc) = N_c & numOnBank(missionaries, Loc) = N_m & loading(cannibals) = L_c & loading(missionaries) = L_m & Rem_cannibals = N_c - L_c & Rem_missionaries = N_m - L_m.

% 11. Walking is not executable if Jesus is already on the opposite bank.
nonexecutable walk if jesusLocation = L1 & L2 = oppositeBank(L1) & jesusLocation = L2.

% 12. At any time, the total number of people in each group equals totalNum(group).
always numOnBank(G, bank1) + numOnBank(G, bank2) = totalNum(G) if G \= jesus.
always numOnBank(jesus, Loc) = 1 if jesusLocation = Loc.
always numOnBank(jesus, Loc) = 0 if jesusLocation \= Loc.

% 14a. It is not permissible for cannibals to outnumber missionaries on either bank when Jesus is at that bank.
impossible numOnBank(cannibals, Loc) > numOnBank(missionaries, Loc) + 1 & jesusLocation = Loc.

% 14b. It is not permissible for cannibals to outnumber missionaries on either bank when Jesus is not at that bank.
impossible numOnBank(cannibals, Loc) > numOnBank(missionaries, Loc) & jesusLocation \= Loc.

% 15a. It is not permissible for cannibals to outnumber missionaries on the boat during crossing when Jesus is on the boat.
nonexecutable cross(Vessel) if N_c > N_m + 1 & loading(cannibals) = N_c & loading(missionaries) = N_m & jesusOnBoat = true.

% 15b. It is not permissible for cannibals to outnumber missionaries on the boat during crossing when Jesus is not on the boat.
nonexecutable cross(Vessel) if N_c > N_m & loading(cannibals) = N_c & loading(missionaries) = N_m & jesusOnBoat = false.

% 17a. Loading(group) during a crossing must be between zero and numOnBank(group, boatLocation).
nonexecutable cross(Vessel) if loading(G) > N & numOnBank(G, Loc) = N & boatLocation = Loc.

% 17b. Loading(group) during a crossing must be at least zero (cannot be negative).
nonexecutable cross(Vessel) if loading(G) < 0.

% 19. It is impossible to cross the boat and walk at the same time.
nonexecutable cross(Vessel) & walk.

% 20. The capacity of the boat is capacity(boat).
capacity(boat) = 2.

% Total number of people in each group.
totalNum(missionaries) = 3.
totalNum(cannibals) = 3.
totalNum(jesus) = 1.

% Define oppositeBank as a rigid constant.
oppositeBank(bank1) = bank2.
oppositeBank(bank2) = bank1.


Main Query:
Three missionaries and three cannibals are at location bank1. The boat is at location bank1. Find a plan so that all missionaries and all cannibals are at location bank2.
:- query
    0: numOnBank(missionaries, bank1) = 3 & numOnBank(cannibals, bank1) = 3 & numOnBank(missionaries, bank2) = 0 & numOnBank(cannibals, bank2) = 0 & jesusLocation = bank1 & boatLocation = bank1;
    maxstep: numOnBank(missionaries, bank2) = 3 & numOnBank(cannibals, bank2) = 3 & numOnBank(missionaries, bank1) = 0 & numOnBank(cannibals, bank1) = 0 & jesusLocation = bank2.


Based on the problem description, and generated BC+ program. Generate some simple queries which can be used to make sure the program is working properly. Only generate a few, no more than 5. Append either (satisfiable) or (unsatisfiable) to the end of the query in natural language, depending on whether the query should work or not. Keep in mind, the starting states of the sample queries should be allowable based on the already written constraints in the program (e.g., if a query comes back unsatisfiable, it shouldn't be because the start state was unsatisfiable). Do so in the following format, encapsulated in 3 backticks:
```
% Query 1: <natural language query> (satisfiable/unsatisfiable)
<BC+ Query>

% Query 2: <natural language query> (satisfiable/unsatisfiable)
<BC+ Query>
...

```