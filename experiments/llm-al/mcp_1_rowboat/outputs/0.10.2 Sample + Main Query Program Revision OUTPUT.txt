% PROGRAM CHANGED? [UNCHANGED]
% BC+ signature
:- sorts
    vessel;
    location;
    group;
    integer.


:- objects
    rowboat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals :: group;
    0..3 :: integer.


:- constants
    cross(vessel) :: exogenousAction;
    numMissCrossing(vessel) :: attribute(integer) of cross(vessel);
    numCannCrossing(vessel) :: attribute(integer) of cross(vessel);
    loc(vessel) :: inertialFluent(location);
    numMissAt(location) :: additiveFluent(integer);
    numCannAt(location) :: additiveFluent(integer).


:- variables
    V :: vessel;
    Loc, Loc1, Loc2 :: location;
    N, N1, N2 :: integer.

% Generated constraints

% 1. Crossing action causes vessel to move to opposite bank.
cross(V) causes loc(V) = Loc2 if Loc1 = loc(V) & ((Loc1 = bank1 & Loc2 = bank2) | (Loc1 = bank2 & Loc2 = bank1)).

% 2. Crossing action decrements the number of missionaries at starting location.
cross(V) decrements numMissAt(Loc1) by numMissCrossing(V) if Loc1 = loc(V).

% 3. Crossing action increments the number of missionaries at destination location.
cross(V) increments numMissAt(Loc2) by numMissCrossing(V) if Loc1 = loc(V) & ((Loc1 = bank1 & Loc2 = bank2) | (Loc1 = bank2 & Loc2 = bank1)).

% 4. Crossing action decrements the number of cannibals at starting location.
cross(V) decrements numCannAt(Loc1) by numCannCrossing(V) if Loc1 = loc(V).

% 5. Crossing action increments the number of cannibals at destination location.
cross(V) increments numCannAt(Loc2) by numCannCrossing(V) if Loc1 = loc(V) & ((Loc1=bank1 & Loc2=bank2) | (Loc1=bank2 & Loc2=bank1)).

% 6. Cannot cross if numMissCrossing + numCannCrossing > 2.
nonexecutable cross(V) if N1 + N2 > 2 & N1 = numMissCrossing(V) & N2 = numCannCrossing(V).

% 7. Cannot cross if numMissCrossing + numCannCrossing < 1.
nonexecutable cross(V) if N1 + N2 < 1 & N1 = numMissCrossing(V) & N2 = numCannCrossing(V).

% 8. Cannot cross if numMissCrossing(V) < 0 or numMissCrossing(V) > numMissAt(Loc1) where Loc1 = loc(V).
nonexecutable cross(V) if N1 < 0 & N1 = numMissCrossing(V).
nonexecutable cross(V) if N1 > N2 & N1 = numMissCrossing(V) & N2 = numMissAt(Loc1) & Loc1 = loc(V).

% 9. Cannot cross if numCannCrossing(V) < 0 or numCannCrossing(V) > numCannAt(Loc1) where Loc1 = loc(V).
nonexecutable cross(V) if N1 < 0 & N1 = numCannCrossing(V).
nonexecutable cross(V) if N1 > N2 & N1 = numCannCrossing(V) & N2 = numCannAt(Loc1) & Loc1 = loc(V).

% 10. Cannot cross if cannibals on boat outnumber missionaries on boat when there's at least one missionary.
nonexecutable cross(V) if N1 > N2 & N2 >= 1 & N1 = numCannCrossing(V) & N2 = numMissCrossing(V).

% 11. Cannibals cannot outnumber missionaries at any location where there is at least one missionary.
impossible N1 > N2 & N2 >= 1 & N1 = numCannAt(Loc) & N2 = numMissAt(Loc).

% 12. Number of missionaries and cannibals at any location cannot be negative.
impossible numMissAt(Loc) < 0.
impossible numCannAt(Loc) < 0.

% 13. Total number of missionaries and cannibals at both banks must sum to 3.
impossible numMissAt(bank1) + numMissAt(bank2) \= 3.
impossible numCannAt(bank1) + numCannAt(bank2) \= 3.

% MAIN QUERY CHANGED? [UNCHANGED]
% Three missionaries and three cannibals are at location bank1. The rowboat is at location bank1. Find a plan so that all missionaries and all cannibals are at location bank2.
:- query
    0: numMissAt(bank1) = 3 & numCannAt(bank1) = 3 & numMissAt(bank2) = 0 & numCannAt(bank2) = 0 & loc(rowboat) = bank1;
    maxstep: numMissAt(bank2) = 3 & numCannAt(bank2) = 3 & loc(rowboat) = bank2.

% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 1: One missionary crosses alone from bank1 to bank2. (unsatisfiable)
:- query
    0: numMissAt(bank1)=3 & numCannAt(bank1)=3 & numMissAt(bank2)=0 & numCannAt(bank2)=0 & loc(rowboat)=bank1;
    0: cross(rowboat);
    0: numMissCrossing(rowboat)=1 & numCannCrossing(rowboat)=0;
    maxstep: numMissAt(bank1)=2 & numCannAt(bank1)=3 & numMissAt(bank2)=1 & numCannAt(bank2)=0 & loc(rowboat)=bank2;

% Query 2: Attempting to cross the river with an empty boat. (unsatisfiable)
:- query
    0: numMissAt(bank1)=3 & numCannAt(bank1)=3 & numMissAt(bank2)=0 & numCannAt(bank2)=0 & loc(rowboat)=bank1;
    0: cross(rowboat);
    0: numMissCrossing(rowboat)=0 & numCannCrossing(rowboat)=0;

% Query 3: Two cannibals cross from bank1 to bank2 together. (satisfiable)
:- query
    0: numMissAt(bank1)=3 & numCannAt(bank1)=3 & numMissAt(bank2)=0 & numCannAt(bank2)=0 & loc(rowboat)=bank1;
    0: cross(rowboat);
    0: numMissCrossing(rowboat)=0 & numCannCrossing(rowboat)=2;
    maxstep: numMissAt(bank1)=3 & numCannAt(bank1)=1 & numMissAt(bank2)=0 & numCannAt(bank2)=2 & loc(rowboat)=bank2;

% Query 4: Two missionaries and one cannibal attempt to cross together, exceeding boat capacity. (unsatisfiable)
:- query
    0: numMissAt(bank1)=3 & numCannAt(bank1)=3 & numMissAt(bank2)=0 & numCannAt(bank2)=0 & loc(rowboat)=bank1;
    0: cross(rowboat);
    0: numMissCrossing(rowboat)=2 & numCannCrossing(rowboat)=1;

% Query 5: One missionary and one cannibal cross together from bank1 to bank2. (satisfiable)
:- query
    0: numMissAt(bank1)=3 & numCannAt(bank1)=3 & numMissAt(bank2)=0 & numCannAt(bank2)=0 & loc(rowboat)=bank1;
    0: cross(rowboat);
    0: numMissCrossing(rowboat)=1 & numCannCrossing(rowboat)=1;
    maxstep: numMissAt(bank1)=2 & numCannAt(bank1)=2 & numMissAt(bank2)=1 & numCannAt(bank2)=1 & loc(rowboat)=bank2;