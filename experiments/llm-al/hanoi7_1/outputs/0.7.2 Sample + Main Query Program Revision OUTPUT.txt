% PROGRAM CHANGED? [UNCHANGED]
:- sorts
    loc >> disk, peg;
    disk;
    peg;
    integer.

:- objects
    a, b, c :: peg;
    d1, d2, d3, d4, d5, d6, d7 :: disk;
    1..7 :: integer.

:- variables
    D, D1, D2, D3, D4, LD :: disk;
    P, P1, P2, P3, P4 :: peg;
    L, L1, L2, L3, L4 :: loc;
    N, N1, N2, N3, N4 :: integer.

:- constants
    move(disk, loc) :: exogenousAction;
    loc(disk) :: inertialFluent(loc);
    weight(disk) :: inertialFluent(integer).

% Constraints/Rules

% 1. Moving a disk to a location causes the disk's location to become that location.
move(D,L) causes loc(D)=L.

% 2. A disk cannot be moved if there is another disk whose location is the disk being moved.
nonexecutable move(D,L) if loc(D2)=D.

% 3. The move action is not executable if the destination location is a disk and the disk being moved is heavier than the destination disk.
nonexecutable move(D,L) if L=LD & weight(D) > weight(LD).

% 4. The move action is not executable if the disk being moved is the same as its destination location.
nonexecutable move(D,L) if D=L.

% 5. It is impossible for two disks to have the same location.
impossible loc(D1)=L & loc(D2)=L & D1\=D2.

% 6. It is impossible for a disk to be located on itself.
impossible loc(D)=D.

% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 1: Try to move disk d1 to peg a when it has disk d2 on top of it (unsatisfiable)
:- query
    0: loc(d1)=c & loc(d2)=d1 & weight(d1)=7 & weight(d2)=6;
    0: move(d1,a).

% Query 2: Try to move heavier disk d3 onto lighter disk d6 (unsatisfiable)
:- query
    0: loc(d3)=d2 & loc(d2)=d1 & weight(d3)=5 & weight(d2)=6 & weight(d1)=7;
    0: loc(d6)=d4 & weight(d6)=2 & weight(d4)=4;
    0: move(d3,d6).

% Query 3: Try to move disk d5 onto itself (unsatisfiable)
:- query
    0: loc(d5)=b & weight(d5)=3;
    0: move(d5,d5).

% Query 4: Move disk d6 onto heavier disk d3 (satisfiable)
:- query
    0: loc(d6)=d4 & loc(d4)=a & weight(d6)=2 & weight(d4)=4;
    0: loc(d3)=d2 & loc(d2)=d1 & loc(d1)=c & weight(d3)=5 & weight(d2)=6 & weight(d1)=7;
    0: move(d6,d3).

% Query 5: Try to move disks d5 and d7 both to peg c at the same time (unsatisfiable)
:- query
    0: loc(d5)=b & weight(d5)=3 & loc(d7)=d5 & weight(d7)=1;
    0: move(d5,c) & move(d7,c).

% MAIN QUERY CHANGED? [UNCHANGED]
% Disk d1 is on peg c. Disk d2 is on disk d1. Disk d3 is on disk d2. Disk d4 is on peg a. Disk d5 is on peg b. Disk d6 is on disk d4. Disk d7 is on disk d5. From heaviest to lightest, the disks are d1, d2, d3, d4, d5, d6, and d7. Find a plan to stack all disks on peg c.
:- query
    0: loc(d1)=c & loc(d2)=d1 & loc(d3)=d2 & loc(d4)=a & loc(d5)=b & loc(d6)=d4 & loc(d7)=d5 &
       weight(d1)=7 & weight(d2)=6 & weight(d3)=5 & weight(d4)=4 & weight(d5)=3 & weight(d6)=2 & weight(d7)=1;
    maxstep: loc(d1)=c & loc(d2)=c & loc(d3)=c & loc(d4)=c & loc(d5)=c & loc(d6)=c & loc(d7)=c.