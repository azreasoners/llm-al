:- sorts
    vessel;
    location;
    group;
    integer.


:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    missionaries, cannibals :: group;
    0..10 :: integer.


:- variables
    G, G1, G2, G3, G4 :: group;
    Loc, Loc1, Loc2, Loc3, Loc4 :: location;
    N, N1, N2, N3, N4 :: integer.


:- constants
    cross :: exogenousAction;
    numCrossing(group) :: attribute(integer) of cross;

    numAt(group, location) :: inertialFluent(integer);
    boatAt :: inertialFluent(location).


% constraints/rules

% 1. Crossing causes the boat to be at the opposite bank.
cross causes boatAt = Loc2 if boatAt = Loc1 & Loc1 \= Loc2 & (Loc1 = bank1 & Loc2 = bank2 | Loc1 = bank2 & Loc2 = bank1).

% 2. Crossing causes the number of missionaries at the departing bank to decrease by the number of missionaries crossing.
cross decrements numAt(missionaries, boatAt) by N1 if N1 = numCrossing(missionaries).

% 3. Crossing causes the number of cannibals at the departing bank to decrease by the number of cannibals crossing.
cross decrements numAt(cannibals, boatAt) by N2 if N2 = numCrossing(cannibals).

% 4. Crossing causes the number of missionaries at the arriving bank to increase by the number of missionaries crossing.
cross increments numAt(missionaries, Loc2) by N1 if N1 = numCrossing(missionaries) & Loc2 \= boatAt.

% 5. Crossing causes the number of cannibals at the arriving bank to increase by the number of cannibals crossing.
cross increments numAt(cannibals, Loc2) by N2 if N2 = numCrossing(cannibals) & Loc2 \= boatAt.

% 6. Crossing is not executable if the total number of people crossing is zero.
nonexecutable cross if N1 + N2 = 0 & N1 = numCrossing(missionaries) & N2 = numCrossing(cannibals).

% 7. Crossing is not executable if the total number of people crossing exceeds two.
nonexecutable cross if N1 + N2 > 2 & N1 = numCrossing(missionaries) & N2 = numCrossing(cannibals).

% 9a. Crossing is not executable if the number of missionaries crossing is negative.
nonexecutable cross if N < 0 & N = numCrossing(missionaries).

% 9b. Crossing is not executable if the number of cannibals crossing is negative.
nonexecutable cross if N < 0 & N = numCrossing(cannibals).

% 9c. Crossing is not executable if the number of missionaries crossing exceeds the number of missionaries at the departing bank.
nonexecutable cross if N1 > N2 & N1 = numCrossing(missionaries) & N2 = numAt(missionaries, boatAt).

% 9d. Crossing is not executable if the number of cannibals crossing exceeds the number of cannibals at the departing bank.
nonexecutable cross if N1 > N2 & N1 = numCrossing(cannibals) & N2 = numAt(cannibals, boatAt).

% 10. Crossing is not executable if the number of missionaries crossing is greater than zero and the number of cannibals crossing is zero.
nonexecutable cross if N1 > 0 & N2 = 0 & N1 = numCrossing(missionaries) & N2 = numCrossing(cannibals).

% 12. Crossing is not executable if the number of cannibals crossing exceeds the number of missionaries crossing unless there are no missionaries crossing.
nonexecutable cross if N1 > N2 & N2 > 0 & N1 = numCrossing(cannibals) & N2 = numCrossing(missionaries).

% 11. Always, the number of cannibals at either bank does not exceed the number of missionaries at that bank unless there are no missionaries at that bank.
always numAt(cannibals, Loc) <= numAt(missionaries, Loc) | numAt(missionaries, Loc) = 0.


% query

:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 & boatAt = bank1;
    maxstep: numAt(missionaries, bank2) = 3 & numAt(cannibals, bank2) = 3 & numAt(missionaries, bank1) = 0 & numAt(cannibals, bank1) = 0.