:- sorts
    integer;
    basicGroup;
    group >> basicGroup;
    vessel;
    location;
    place >> location; vessel.



:- objects
    missionaries, cannibals :: basicGroup;
    boat :: vessel;
    bank1, bank2 :: location;
    0..10 :: integer.



:- variables
    BG, BG1, BG2, BG3, BG4 :: basicGroup;
    G, G1, G2, G3, G4 :: group;
    V, V1, V2, V3, V4 :: vessel;
    L, L1, L2, L3, L4 :: location;
    P, P1, P2, P3, P4 :: place;
    N, N1, N2, N3, N4, N_c, N_m :: integer.



:- constants
    cross(vessel) :: exogenousAction;
    numCrossing(vessel, basicGroup) :: attribute(integer) of cross(vessel);
    rower(vessel, basicGroup) :: attribute(boolean) of cross(vessel);
    capacity(vessel) :: inertialFluent(integer);
    boatLoc :: inertialFluent(location);
    numAt(basicGroup, place) :: additiveFluent(integer).

% constraints/rules

% 1. Crossing the boat causes the boat's location to change to bank2 if it was at bank1.
cross(boat) causes boatLoc = bank2 if boatLoc = bank1.

% 2. Crossing the boat causes the boat's location to change to bank1 if it was at bank2.
cross(boat) causes boatLoc = bank1 if boatLoc = bank2.

% 3. Crossing the boat decreases the number of each basicGroup at the boat's current location by the number crossing of that basicGroup.
cross(boat) decrements numAt(BG, boatLoc) by N if numCrossing(boat, BG) = N.

% 4a. Crossing the boat increases the number of each basicGroup at bank2 by the number crossing if the boat is at bank1.
cross(boat) increments numAt(BG, bank2) by N if boatLoc = bank1 & numCrossing(boat, BG) = N.

% 4b. Crossing the boat increases the number of each basicGroup at bank1 by the number crossing if the boat is at bank2.
cross(boat) increments numAt(BG, bank1) by N if boatLoc = bank2 & numCrossing(boat, BG) = N.

% 5. The crossing action is not executable if the total number of people crossing exceeds the capacity of the boat.
nonexecutable cross(boat) if N1 + N2 > capacity(boat) & numCrossing(boat, missionaries) = N1 & numCrossing(boat, cannibals) = N2.

% 6. The crossing action is not executable if the total number of people crossing is zero.
nonexecutable cross(boat) if N1 + N2 = 0 & numCrossing(boat, missionaries) = N1 & numCrossing(boat, cannibals) = N2.

% 7. The crossing action is not executable if the number crossing of any basicGroup is greater than the number of that basicGroup at the boat's current location.
nonexecutable cross(boat) if N1 > N2 & numCrossing(boat, BG) = N1 & numAt(BG, boatLoc) = N2.

% 8. The crossing action is not executable unless there is a rower specified.
nonexecutable cross(boat) if ~rower(boat, missionaries) & ~rower(boat, cannibals).

% 9. The crossing action is not executable if the rower is not among the basicGroups crossing on the boat.
nonexecutable cross(boat) if rower(boat, BG) & numCrossing(boat, BG) = 0.

% 10. At any place, if the number of missionaries is greater than zero, the number of cannibals at that place cannot exceed the number of missionaries at that place.
impossible numAt(missionaries, P) = N_m & N_m > 0 & numAt(cannibals, P) = N_c & N_c > N_m.

% 11. On the boat during crossing, if the number of missionaries crossing is greater than zero, the number of cannibals crossing cannot exceed the number of missionaries crossing.
nonexecutable cross(boat) if numCrossing(boat, missionaries) = N_m & N_m > 0 & numCrossing(boat, cannibals) = N_c & N_c > N_m.

% 12. The capacity of the boat is 2.
capacity(boat) = 2.

% 13. The crossing action is not executable if both missionaries and cannibals are rowing.
nonexecutable cross(boat) if rower(boat, missionaries) & rower(boat, cannibals).



:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 & numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 & boatLoc = bank1;
    maxstep: numAt(missionaries, bank2) = 3 & numAt(cannibals, bank2) = 3 & boatLoc = bank2.

