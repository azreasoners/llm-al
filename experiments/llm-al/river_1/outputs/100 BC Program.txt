:- sorts
    thing;
    item;
    side.


:- objects
    mouse, snake, cheese, boat :: thing;
    mouse, snake, cheese :: item;
    LeftBank, RightBank :: side.


:- variables
    T :: thing;
    T1, T2, T3, T4 :: item;
    S, S1, S2, S3, S4 :: side;
    Bool, Bool1, Bool2, Bool3, Bool4 :: boolean.


:- constants
    moveBoat(side) :: exogenousAction;
    boardBoat(item) :: exogenousAction;
    unboardBoat(item) :: exogenousAction;
    loc(thing) :: inertialFluent(side);
    onBoat(item) :: inertialFluent(boolean).

% constraints/rules
% 1. Moving the boat to a side causes the location of the boat to be that side.
moveBoat(S) causes loc(boat) = S.

% 2. Moving the boat to a side causes the location of any item on the boat to be that side.
moveBoat(S) causes loc(T1) = S if onBoat(T1).

% 3. Moving the boat is not executable if the boat is already on that side.
nonexecutable moveBoat(S) if loc(boat) = S.

% 4. Boarding the boat with an item causes the item to be on the boat.
boardBoat(T1) causes onBoat(T1).

% 5. Boarding the boat with an item causes the location of the item to be the same as the boat's location.
boardBoat(T1) causes loc(T1) = loc(boat).

% 6. Boarding the boat is not executable if the item is already on the boat.
nonexecutable boardBoat(T1) if onBoat(T1).

% 7. Boarding the boat is not executable if the item is not on the same side as the boat.
nonexecutable boardBoat(T1) if loc(T1) \= loc(boat).

% 8. Boarding the boat is not executable if there is already an item on the boat.
nonexecutable boardBoat(T1) if onBoat(T2) & T1 \= T2.

% 9. Unboarding an item from the boat causes the item to not be on the boat.
unboardBoat(T1) causes ~onBoat(T1).

% 10. Unboarding an item from the boat causes the location of the item to remain the same as the boat's location.
unboardBoat(T1) causes loc(T1) = loc(boat).

% 11. Unboarding an item is not executable if the item is not on the boat.
nonexecutable unboardBoat(T1) if ~onBoat(T1).

% 12. It is impossible for more than one item to be on the boat at the same time.
impossible onBoat(T1) & onBoat(T2) & T1 \= T2.

% 13. It is impossible for the snake and mouse to be left alone on a side without the boat.
impossible loc(snake) = S & loc(mouse) = S & loc(boat) \= S & ~onBoat(snake) & ~onBoat(mouse) &
         (loc(cheese) \= S | onBoat(cheese)).

% 14. It is impossible for the mouse and cheese to be left alone on a side without the boat.
impossible loc(mouse) = S & loc(cheese) = S & loc(boat) \= S & ~onBoat(mouse) & ~onBoat(cheese) &
         (loc(snake) \= S | onBoat(snake)).

% 15. If an item is on the boat, its location is the same as the boat's location.
loc(T1) = loc(boat) if onBoat(T1).

% 16. Moving the boat is not executable if an item is boarding or unboarding the boat at the same time.
nonexecutable moveBoat(S) if boardBoat(T1).
nonexecutable moveBoat(S) if unboardBoat(T1).


:- query
    0: loc(snake) = LeftBank & loc(cheese) = LeftBank & loc(mouse) = RightBank & loc(boat) = RightBank &
       ~onBoat(snake) & ~onBoat(cheese) & ~onBoat(mouse);
    maxstep: loc(snake) = RightBank & loc(cheese) = RightBank & loc(mouse) = RightBank.
