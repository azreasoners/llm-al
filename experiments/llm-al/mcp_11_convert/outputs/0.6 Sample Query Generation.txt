% Query 1: Try to cross the boat when no one is on it (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 1 & numAt(cannibals, bank1) = 1 &
       numAt(missionaries, bank2) = 2 & numAt(cannibals, bank2) = 2 &
       loc(boat) = bank1;
    0: cross(boat) & numCrossing(boat, missionaries) = 0 & numCrossing(boat, cannibals) = 0.

% Query 2: Try to cross the boat with 3 people on it (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 &
       numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 &
       loc(boat) = bank1;
    0: cross(boat) & numCrossing(boat, missionaries) = 2 & numCrossing(boat, cannibals) = 1.

% Query 3: Try to cross the boat with acceptable number of passengers (1 missionary and 1 cannibal) (satisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 &
       numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 &
       loc(boat) = bank1;
    0: cross(boat) & numCrossing(boat, missionaries) = 1 & numCrossing(boat, cannibals) = 1.

% Query 4: Try to cross a cannibal to bank2, leading to cannibals outnumbering missionaries on bank2 (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 2 & numAt(cannibals, bank1) = 1 &
       numAt(missionaries, bank2) = 1 & numAt(cannibals, bank2) = 2 &
       loc(boat) = bank1;
    0: cross(boat) & numCrossing(boat, missionaries) = 0 & numCrossing(boat, cannibals) = 1.

% Query 5: Try to perform both 'cross(boat)' and 'convert(bank1)' at the same time (unsatisfiable)
:- query
    0: numAt(missionaries, bank1) = 3 & numAt(cannibals, bank1) = 3 &
       numAt(missionaries, bank2) = 0 & numAt(cannibals, bank2) = 0 &
       loc(boat) = bank1;
    0: cross(boat) & numCrossing(boat, missionaries) = 1 & numCrossing(boat, cannibals) = 1 &
       convert(bank1).