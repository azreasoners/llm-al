% PROGRAM CHANGED? [CHANGED]
% BC+ signature

:- sorts
    integer;
    missionary,
    cannibal,
    person >> missionary, cannibal;
    vessel;
    location.

:- objects
    boat :: vessel;
    bank1, bank2 :: location;
    m1, m2, m3 :: missionary;
    c1, c2 :: cannibal;
    bc :: cannibal;  % bc represents the big cannibal
    0..6 :: integer.

:- constants
    loc(person) :: inertialFluent(location);
    boatLoc :: inertialFluent(location);
    cross :: exogenousAction;
    onBoat(person) :: inertialFluent(boolean);
    board(person) :: exogenousAction;
    disembark(person) :: exogenousAction.

:- variables
    P :: person;
    M :: missionary;
    C :: cannibal;
    N_c, N_m, N :: integer;
    Loc :: location.

% Generated constraints

% Crossing causes the boat location to change to the opposite bank.
cross causes boatLoc = bank2 if boatLoc = bank1.
cross causes boatLoc = bank1 if boatLoc = bank2.

% Crossing causes the location of people on the boat to change to the opposite bank.
cross causes loc(P) = bank2 if onBoat(P) & boatLoc = bank1.
cross causes loc(P) = bank1 if onBoat(P) & boatLoc = bank2.

% Boarding causes P to be on the boat.
board(P) causes onBoat(P) = true.

% Disembarking causes P to not be on the boat.
disembark(P) causes onBoat(P) = false.

% Boarding is not executable if P is already on the boat.
nonexecutable board(P) if onBoat(P).

% Disembarking is not executable if P is not on the boat.
nonexecutable disembark(P) if ~onBoat(P).

% Boarding is not executable if P is not at the same location as the boat.
nonexecutable board(P) if loc(P) \= boatLoc.

% Disembarking is not executable if P is not at the same location as the boat.
nonexecutable disembark(P) if loc(P) \= boatLoc.

% The cross action is not executable if no one is on the boat.
nonexecutable cross if N = 0 & N = #(P : onBoat(P)).

% It's impossible to have more than 2 people on the boat.
impossible N > 2 & N = #(P : onBoat(P)).

% The cross action is not executable if big cannibal is on the boat with another person.
nonexecutable cross if onBoat(bc) & N > 1 & N = #(P : onBoat(P)).

% Cross is not executable if any person on the boat is not at the same location as the boat.
nonexecutable cross if onBoat(P) & loc(P) \= boatLoc.

% It's impossible for cannibals to outnumber missionaries at any location where missionaries are present.
impossible N_c > N_m & N_m > 0 & N_c = #(C : loc(C) = Loc) & N_m = #(M : loc(M) = Loc).

% It's impossible for cannibals on the boat to outnumber missionaries on the boat when missionaries are present.
impossible N_c > N_m & N_m > 0 & N_c = #(C : onBoat(C)) & N_m = #(M : onBoat(M)).

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: loc(m1) = bank1 & loc(m2) = bank1 & loc(m3) = bank1 &
       loc(c1) = bank1 & loc(c2) = bank1 & loc(bc) = bank1 &
       boatLoc = bank1 &
       onBoat(m1) = false & onBoat(m2) = false & onBoat(m3) = false &
       onBoat(c1) = false & onBoat(c2) = false & onBoat(bc) = false;
    maxstep: loc(m1) = bank2 & loc(m2) = bank2 & loc(m3) = bank2 &
             loc(c1) = bank2 & loc(c2) = bank2 & loc(bc) = bank2 &
             boatLoc = bank2.

% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 0: Check satisfiability of program signature and rules (ignores other queries). (satisfiable)
:- query = sat.

% Query 1: Attempt to cross the river with no one on the boat (unsatisfiable)
:- query
    0: loc(m1) = bank1 & loc(c1) = bank1 & boatLoc = bank1 &
       onBoat(m1) = false & onBoat(c1) = false;
    0: cross.

% Query 2: Cross the river with bigCannibal alone from bank1 to bank2 (satisfiable)
:- query
    0: loc(bc) = bank1 & boatLoc = bank1 &
       onBoat(bc) = true &
       loc(bc) = boatLoc;
    0: N = #(P : onBoat(P)) & N = 1;
    0: cross.

% Query 3: Try to have bigCannibal cross with another person in the boat from bank1 to bank2 (unsatisfiable)
:- query
    0: loc(bc) = bank1 & loc(c1) = bank1 & boatLoc = bank1 &
       onBoat(bc) = true & onBoat(c1) = true &
       loc(bc) = boatLoc & loc(c1) = boatLoc;
    0: N = #(P : onBoat(P)) & N = 2;
    0: cross.

% Query 4: Try to cross the river with three people in the boat (unsatisfiable)
:- query
    0: loc(m1) = bank1 & loc(c1) = bank1 & loc(c2) = bank1 & boatLoc = bank1 &
       onBoat(m1) = true & onBoat(c1) = true & onBoat(c2) = true &
       loc(m1) = boatLoc & loc(c1) = boatLoc & loc(c2) = boatLoc;
    0: N = #(P : onBoat(P)) & N = 3;
    0: cross.

% Query 5: Attempt to have cannibals outnumber missionaries on the boat (unsatisfiable)
:- query
    0: loc(m1) = bank1 & loc(c1) = bank1 & loc(c2) = bank1 & boatLoc = bank1 &
       onBoat(m1) = false & onBoat(c1) = true & onBoat(c2) = true &
       loc(c1) = boatLoc & loc(c2) = boatLoc;
    0: N_c = #(C : onBoat(C)) & N_c = 2;
    0: N_m = #(M : onBoat(M)) & N_m = 0;
    0: cross.