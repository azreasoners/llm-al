def is_valid(board, row, col, num):
    # Check if the number is in the current row
    for c in range(9):
        if board[row][c] == num:
            return False

    # Check if the number is in the current column
    for r in range(9):
        if board[r][col] == num:
            return False

    # Check if the number is in the current 3x3 box
    start_row = row - row % 3
    start_col = col - col % 3
    for r in range(3):
        for c in range(3):
            if board[start_row + r][start_col + c] == num:
                return False

    return True

def solve_sudoku(board):
    empty = find_empty(board)
    if not empty:
        return True  # Puzzle solved
    else:
        row, col = empty

    for num in range(9):
        if is_valid(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return True
            board[row][col] = -1  # Reset the cell

    return False

def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == -1:  # -1 means the cell is empty
                return (i, j)
    return None

# Initialize the Sudoku board with given numbers and -1 for unknowns
board = [
    [-1, -1, 8, -1, 1, 7, 6, -1, -1],
    [7, -1, 5, -1, -1, 3, -1, -1, 4],
    [-1, -1, 2, -1, -1, -1, -1, -1, 3],
    [5, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, 1, -1, 6, 0, 2, 3, 4, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 1],
    [2, -1, -1, -1, -1, -1, 4, -1, -1],
    [8, -1, -1, 3, -1, -1, 7, -1, 6],
    [-1, -1, 0, 1, 4, -1, 2, -1, -1]
]

# Fix initial placement of the number "0" to be in the correct range (0 is not a valid number in Sudoku)
board[4][4] = 5

# Solve the Sudoku puzzle
if solve_sudoku(board):
    for row in board:
        print(row)
else:
    print("No solution found.")