% PROGRAM CHANGED? [CHANGED]
% BC+ signature
:- sorts
    row;
    column;
    value.

:- objects
    0..8 :: row;
    0..8 :: column;
    empty, 1..9 :: value.

:- variables
    R, R1, R2, R3, R4 :: row;
    C, C1, C2, C3, C4 :: column;
    V, V1, V2, V3, V4 :: value.

:- constants
    val(row, column) :: inertialFluent(value);
    setValue(row, column, value) :: exogenousAction.

% Default: All cells are empty initially.
default val(R, C) = empty.

% Constraints

% 1. Setting a value at (row, column) causes the value at that cell to be the specified value.
setValue(R, C, V) causes val(R, C) = V.

% 2. Setting a value at (row, column) is not executable if the cell at (row, column) already has a value (not empty).
nonexecutable setValue(R, C, V) if val(R, C) \= empty.

% 3. Setting a value at (row, column) is not executable if another cell in the same row already has that value.
nonexecutable setValue(R, C, V) if val(R, C1) = V & C1 \= C.

% 4. Setting a value at (row, column) is not executable if another cell in the same column already has that value.
nonexecutable setValue(R, C, V) if val(R1, C) = V & R1 \= R.

% 5. Setting a value at (row, column) is not executable if another cell in the same 3x3 square already has that value.
nonexecutable setValue(R, C, V) if val(R1, C1) = V & (R1 \= R | C1 \= C) & (R // 3 = R1 // 3) & (C // 3 = C1 // 3).

% 6. It is impossible for two cells in the same row to have the same value (excluding empty).
impossible val(R, C) = V & val(R, C1) = V & V \= empty & C1 \= C.

% 7. It is impossible for two cells in the same column to have the same value (excluding empty).
impossible val(R, C) = V & val(R1, C) = V & V \= empty & R1 \= R.

% 8. It is impossible for two cells in the same 3x3 square to have the same value (excluding empty).
impossible val(R, C) = V & val(R1, C1) = V & V \= empty & (R1 \= R | C1 \= C) & (R // 3 = R1 // 3) & (C // 3 = C1 // 3).

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: val(0, 2) = 9 & val(0, 4) = 2 & val(0, 5) = 8 & val(0, 6) = 7 &
       val(1, 0) = 8 & val(1, 2) = 6 & val(1, 5) = 4 & val(1, 8) = 5 &
       val(2, 2) = 3 & val(2, 8) = 4 &
       val(3, 0) = 6 &
       val(4, 1) = 2 & val(4, 3) = 7 & val(4, 4) = 1 & val(4, 5) = 3 & val(4, 6) = 4 & val(4, 7) = 5 &
       val(5, 8) = 2 &
       val(6, 0) = 3 & val(6, 6) = 5 &
       val(7, 0) = 9 & val(7, 3) = 4 & val(7, 6) = 8 & val(7, 8) = 7 &
       val(8, 2) = 1 & val(8, 3) = 2 & val(8, 4) = 5 & val(8, 6) = 3.

% SAMPLE QUERIES CHANGED? [CHANGED]

% Query 1: Set the value 5 at cell (0, 0) in an empty grid (satisfiable)
:- query
    0: setValue(0, 0, 5).

% Query 2: Try to set the value 3 at cell (0, 0) when it already has value 5 (unsatisfiable)
:- query
    0: val(0, 0) = 5 & setValue(0, 0, 3).

% Query 3: Try to set the value 5 at cell (0, 2) when cell (0, 1) already has value 5 (unsatisfiable)
:- query
    0: val(0, 1) = 5 & setValue(0, 2, 5).

% Query 4: Try to set the value 5 at cell (2, 0) when cell (1, 0) already has value 5 (unsatisfiable)
:- query
    0: val(1, 0) = 5 & setValue(2, 0, 5).

% Query 5: Try to set the value 5 at cell (1, 1) when cell (0, 0) already has value 5 (unsatisfiable)
:- query
    0: val(0, 0) = 5 & setValue(1, 1, 5).