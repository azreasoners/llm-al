def solve_tower_of_hanoi(n, source, target, auxiliary):
    """
    Recursive solution to solve the Tower of Hanoi problem.

    :param n: Number of disks
    :param source: The initial peg
    :param target: The destination peg
    :param auxiliary: The auxiliary peg
    :return: A list of moves required to solve the problem
    """
    if n == 1:
        return [(source, target)]
    else:
        moves = []
        # Move n-1 disks from source to auxiliary, so they are out of the way
        moves += solve_tower_of_hanoi(n-1, source, auxiliary, target)
        
        # Move the nth disk from source to target
        moves.append((source, target))
        
        # Move the n-1 disks from auxiliary to target
        moves += solve_tower_of_hanoi(n-1, auxiliary, target, source)
        
        return moves

# Number of disks
number_of_disks = 7

# Call the function and print the moves
moves = solve_tower_of_hanoi(number_of_disks, 'a', 'c', 'b')
moves