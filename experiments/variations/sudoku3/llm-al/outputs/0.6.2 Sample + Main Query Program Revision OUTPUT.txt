% PROGRAM CHANGED? [CHANGED]
% BC+ signature
:- sorts
    row;
    column;
    value.

:- objects
    0..8 :: row;
    0..8 :: column;
    0..9 :: value.  % Include 0 to represent 'unassigned'

:- variables
    R, R1, R2, R3, R4 :: row;
    C, C1, C2, C3, C4 :: column;
    V, V1, V2, V3, V4 :: value.

:- constants
    value(row, column) :: inertialFluent(value);
    assignValue(row, column, value) :: exogenousAction.

% By default, cells have value 0 (unassigned)
default value(R, C) = 0.

% constraints/rules

% 1. Assigning a value to a cell causes the value at that cell to become that value.
assignValue(R, C, V) causes value(R, C) = V.

% 2. The assignValue action is not executable if the cell already has a value (non-zero).
nonexecutable assignValue(R, C, V) if value(R, C) \= 0.

% 3. The assignValue action is not executable if the same value exists in the same row.
nonexecutable assignValue(R, C, V) if value(R, C1) = V & C1 \= C.

% 4. The assignValue action is not executable if the same value exists in the same column.
nonexecutable assignValue(R, C, V) if value(R1, C) = V & R1 \= R.

% 5. The assignValue action is not executable if the same value exists in the same 3x3 square.
nonexecutable assignValue(R, C, V) if value(R1, C1) = V & (R1 \= R | C1 \= C) & (R // 3) = (R1 // 3) & (C // 3) = (C1 // 3).

% 6. It is impossible for two cells in the same row to have the same value (non-zero).
impossible value(R, C) = V & value(R, C1) = V & V \= 0 & C \= C1.

% 7. It is impossible for two cells in the same column to have the same value (non-zero).
impossible value(R, C) = V & value(R1, C) = V & V \= 0 & R \= R1.

% 8. It is impossible for two cells in the same 3x3 square to have the same value (non-zero).
impossible value(R, C) = V & value(R1, C1) = V & V \= 0 & (R1 \= R | C1 \= C) & (R // 3) = (R1 // 3) & (C // 3) = (C1 // 3).

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: value(0,1)=4 & value(0,3)=1 & value(0,7)=5 &
       value(1,0)=1 & value(1,2)=7 & value(1,5)=3 & value(1,6)=9 & value(1,7)=6 &
       value(2,0)=5 & value(2,1)=2 & value(2,5)=8 &
       value(3,7)=1 & value(3,8)=7 &
       value(4,3)=9 & value(4,5)=6 & value(4,6)=8 &
       value(5,0)=8 & value(5,2)=3 & value(5,4)=5 & value(5,6)=6 & value(5,7)=2 &
       value(6,1)=9 & value(6,4)=6 & value(6,6)=5 & value(6,7)=4 & value(6,8)=3 &
       value(7,0)=6 & value(7,4)=8 & value(7,6)=7 &
       value(8,0)=2 & value(8,1)=5 & value(8,4)=9 & value(8,5)=7 & value(8,6)=1;

    maxstep: value(R, C) = V.

% SAMPLE QUERIES CHANGED? [CHANGED]
% Query 1: Assign value 5 to cell (0,0) when no constraints are violated. (satisfiable)
:- query
    0: value(1,0)=3 & value(0,2)=4;
    0: assignValue(0,0,5);
    maxstep: value(0,0)=5.

% Query 2: Try to assign value 5 to cell (0,0) when another cell in the same row already has value 5. (unsatisfiable)
:- query
    0: value(0,1)=5;
    0: assignValue(0,0,5).

% Query 3: Try to assign value 5 to cell (0,0) when another cell in the same column already has value 5. (unsatisfiable)
:- query
    0: value(1,0)=5;
    0: assignValue(0,0,5).

% Query 4: Try to assign value 5 to cell (0,0) when another cell in the same 3x3 square already has value 5. (unsatisfiable)
:- query
    0: value(1,1)=5;
    0: assignValue(0,0,5).

% Query 5: Assign value 5 to cell (0,0) when the same value exists in a different 3x3 square. (satisfiable)
:- query
    0: value(3,3)=5;
    0: assignValue(0,0,5);
    maxstep: value(0,0)=5.