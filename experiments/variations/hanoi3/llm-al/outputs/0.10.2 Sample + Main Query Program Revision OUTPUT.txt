% PROGRAM CHANGED? [UNCHANGED]
:- sorts
    location;
    disk;
    integer.

:- objects
    d1, d2, d3, a, b, c :: location;
    d1, d2, d3          :: disk;
    1..3                :: integer.

:- constants
    move(disk) :: exogenousAction;
    destination(disk) :: attribute(location) of move(disk);
    loc(disk) :: inertialFluent(location);
    weight(disk) :: inertialFluent(integer).

:- variables
    D, D1, D2          :: disk;
    L, L1, L2          :: location;
    N1, N2             :: integer.

% Generated constraints

% 1. Moving a disk causes its location to be that of its destination.
move(D) causes loc(D)=L if destination(D)=L.

% 2. Moving a disk is not executable if there is another disk whose location is the disk being moved.
nonexecutable move(D) if loc(D1)=D & D1\=D.

% 3. Moving a disk onto another disk is not executable if the moving disk's weight is greater than the destination disk's weight.
nonexecutable move(D) if destination(D)=D2 & weight(D)=N1 & weight(D2)=N2 & N1 > N2.

% 4. Moving a disk onto a location is not executable if there is a disk whose location is the destination location.
nonexecutable move(D) if destination(D)=L & loc(D2)=L & D2\=D.

% 5. A disk cannot be moved onto itself.
nonexecutable move(D) if destination(D)=D.

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: loc(d1)=a & loc(d2)=d1 & loc(d3)=d2 & weight(d1)=3 & weight(d2)=2 & weight(d3)=1;
    maxstep: loc(d1)=c & loc(d2)=d1 & loc(d3)=d2.

% SAMPLE QUERIES CHANGED? [UNCHANGED]
% Query 1: Move the topmost disk d3 to peg b (satisfiable)
:- query
    0: loc(d1)=a & loc(d2)=d1 & loc(d3)=d2 & weight(d1)=3 & weight(d2)=2 & weight(d3)=1;
    0: move(d3) & destination(d3)=b.

% Query 2: Attempt to move disk d2 when there is a disk (d3) on top of it (unsatisfiable)
:- query
    0: loc(d1)=a & loc(d2)=d1 & loc(d3)=d2 & weight(d1)=3 & weight(d2)=2 & weight(d3)=1;
    0: move(d2) & destination(d2)=b.

% Query 3: Attempt to move disk d2 onto disk d3, where d2 is heavier than d3 (unsatisfiable)
:- query
    0: loc(d1)=a & loc(d2)=d1 & loc(d3)=b & weight(d1)=3 & weight(d2)=2 & weight(d3)=1;
    0: move(d2) & destination(d2)=d3.

% Query 4: Move disk d3 onto disk d2, where d3 is lighter than d2 (satisfiable)
:- query
    0: loc(d1)=a & loc(d2)=b & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1;
    0: move(d3) & destination(d3)=d2.

% Query 5: Attempt to move disk d1 onto peg b when there is already a disk (d2) at b (unsatisfiable)
:- query
    0: loc(d1)=a & loc(d2)=b & weight(d1)=3 & weight(d2)=2;
    0: move(d1) & destination(d1)=b.