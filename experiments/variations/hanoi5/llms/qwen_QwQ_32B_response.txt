So I've got this problem here, it's about moving disks from one peg to another, specifically stacking them all on peg c, and there are some rules I need to follow. Let's see...

First, there are five disks: d1, d2, d3, d4, and d5. They're currently stacked on peg a, with d1 at the bottom and d5 at the top. The weights are given from heaviest to lightest: d1, d2, d3, d4, d5. So d1 is the heaviest and d5 is the lightest.

The goal is to move all of them to peg c, maintaining the same order, I assume, since it's a tower. This sounds a lot like the Tower of Hanoi problem, which I'm familiar with. In the classic Tower of Hanoi, you have three pegs and a number of disks of decreasing size, and you have to move the entire stack from one peg to another, following certain rules.

The rules are:

1. Only one disk can be moved at a time.

2. Each move consists of taking the upper disk from one stack and placing it on another stack or on an empty peg.

3. No disk may be placed on top of a smaller disk.

From the problem statement, it seems these are the rules I have to follow.

So, in the Tower of Hanoi, the minimal number of moves to move n disks is 2^n - 1. Here, n=5, so it should take 2^5 - 1 = 31 moves. But I don't need to list all 31 moves, just find a plan to do it.

Let me recall the general strategy for solving the Tower of Hanoi:

1. Move the top n-1 disks from the source peg to the auxiliary peg, using the destination peg as a temporary holding area.

2. Move the nth disk from the source peg to the destination peg.

3. Move the n-1 disks from the auxiliary peg to the destination peg, on top of the nth disk, again using the source peg as a temporary holding area.

This is a recursive algorithm, and it works for any number of disks.

In this problem, the source peg is a, the destination is c, and the auxiliary is b.

So, applying this to the five disks:

1. Move disks d1 to d4 from peg a to peg b, using peg c as auxiliary.

2. Move disk d5 from peg a to peg c.

3. Move disks d1 to d4 from peg b to peg c, using peg a as auxiliary.

Wait, but actually, since d5 is on top, and it's the lightest, I can move it directly to peg c, provided there's no disk smaller than it already on peg c, which there isn't, since peg c is empty.

But let's think step by step.

First, I need to move d1 to d4 from peg a to peg b, using peg c as auxiliary. But d1 is the heaviest, and there are disks on top of it. So, to move d1, I need to first move d2 to d5 off of it.

Wait, perhaps I should think recursively.

Let me try to write down the steps for moving five disks from a to c, using b as auxiliary.

So, the general algorithm is:

To move n disks from source to destination using auxiliary:

if n == 1:

move disk from source to destination

else:

move n-1 disks from source to auxiliary, using destination as auxiliary

move nth disk from source to destination

move n-1 disks from auxiliary to destination, using source as auxiliary

So, for n=5:

move 4 disks from a to b, using c as auxiliary

move d5 from a to c

move 4 disks from b to c, using a as auxiliary

Now, to move 4 disks from a to b:

move 3 disks from a to c, using b as auxiliary

move d4 from a to b

move 3 disks from c to b, using a as auxiliary

And so on, recursively.

This seems a bit tedious to write out fully, but I can see the pattern.

Alternatively, perhaps there's a shorter way, but I think following the standard Tower of Hanoi algorithm is the most efficient way.

Let me try to outline the steps more clearly.

First, move the top four disks (d2 to d5) from a to b, using c as auxiliary.

Then, move d1 from a to c.

Then, move the four disks from b to c, onto d1.

But wait, d1 is heavier than all the others, so it can have any of the other disks on top of it.

Wait, no, the problem says "A disk cannot be moved onto another if it is heavier than it." So d1 cannot have any other disk on top of it because it's the heaviest. d2 can have d3, d4, d5 on top of it, but not d1, and so on.

So, in the final stack on peg c, d1 has to be at the bottom, then d2, up to d5 at the top.

So, following the standard Tower of Hanoi algorithm should ensure that.

Let me try to simulate the first few moves.

Step 1: Move d5 from a to c.

Now, peg a has d1, d2, d3, d4.

Peg b is empty.

Peg c has d5.

Step 2: Move d4 from a to b.

Now, peg a has d1, d2, d3.

Peg b has d4.

Peg c has d5.

Step 3: Move d5 from c to b, on top of d4.

But wait, d5 is lighter than d4, so I can't place d5 on d4. The problem says "A disk cannot be moved onto another if it is heavier than it." d5 is lighter than d4, so d5 cannot be placed on d4. Only heavier disks can be placed on lighter ones.

Wait, that seems contradictory to the standard Tower of Hanoi rules. In the standard problem, you can't place a larger disk on a smaller one, but here it says you can't place a heavier disk onto a lighter one.

Assuming that "heavier" corresponds to "larger" in the standard problem, then the rules are similar.

But according to the problem, disks are ordered from heaviest to lightest: d1, d2, d3, d4, d5.

So, d1 is the largest (heaviest), d5 is the smallest (lightest).

Therefore, in this problem, you can't place a heavier disk onto a lighter one, which means you can't place d1 onto d2, d3, d4, or d5, because d1 is heavier than all of them.

Similarly, you can't place d2 onto d3, d4, or d5, and so on.

This aligns with the standard Tower of Hanoi rules, where you can't place a larger disk on a smaller one.

So, in this problem, "heavier" means "larger in size."

Therefore, the rules are the same as the standard Tower of Hanoi.

Given that, I can proceed with the standard algorithm.

So, to move five disks from a to c, using b as auxiliary.

Following the recursive algorithm:

1. Move the top four disks (d2 to d5) from a to b, using c as auxiliary.

2. Move d1 from a to c.

3. Move the four disks from b to c, onto d1.

Now, step 1 is itself a subproblem of moving four disks from a to b, using c as auxiliary.

Similarly, step 3 is moving four disks from b to c, using a as auxiliary.

Each of these subproblems can be broken down further recursively until we reach the base case of moving a single disk.

This seems straightforward, but it's a bit tedious to write out all 31 steps.

Alternatively, perhaps I can describe the general approach and outline the key steps.

So, the plan is to use the Tower of Hanoi algorithm to move the five disks from peg a to peg c, using peg b as auxiliary, following the rules.

Given that, the sequence of moves can be generated recursively.

If I were to write a program, I could implement the recursive function to generate the moves.

But since this is a theoretical problem, perhaps I don't need to list every single move, just provide a high-level plan.

So, high-level plan:

1. Move the top four disks (d2 to d5) from a to b, using c as auxiliary.

2. Move d1 from a to c.

3. Move the four disks from b to c, onto d1.

And within step 1 and step 3, apply the same algorithm recursively.

This is the standard solution for the Tower of Hanoi problem.

Therefore, this plan will successfully stack all disks on peg c in the desired order.

**Final Answer**

\boxed{\text{Follow the Tower of Hanoi algorithm to move all disks from peg a to peg c, using peg b as auxiliary, following the rules provided.}}