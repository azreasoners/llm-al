% PROGRAM CHANGED? [UNCHANGED]
% BC+ Program:
:- sorts
    row;
    column;
    value;
    valOrEmpty.


:- objects
    0..8 :: row;
    0..8 :: column;
    1..9 :: value;
    empty :: valOrEmpty;
    1..9 :: valOrEmpty.


:- variables
    R, R1, R2, R3, R4 :: row;
    C, C1, C2, C3, C4 :: column;
    V, V1, V2, V3, V4 :: value;
    Val, Val1, Val2 :: valOrEmpty.


:- constants
    val(row, column) :: inertialFluent(valOrEmpty);
    setValue(row, column, value) :: exogenousAction.

% By default, val(R,C) = empty.
default val(R,C) = empty.

% constraints/rules

% 1. Setting a value at (row, column) causes the value at that cell to be the specified value.
setValue(R,C,V) causes val(R,C)=V.

% 2. Setting a value at (row, column) is not executable if the cell at (row, column) already has a value (not empty).
nonexecutable setValue(R,C,V) if val(R,C)\=empty.

% 3. Setting a value at (row, column) is not executable if another cell in the same row already has that value.
nonexecutable setValue(R,C,V) if val(R,C1)=V & C1\=C & val(R,C1)\=empty.

% 4. Setting a value at (row, column) is not executable if another cell in the same column already has that value.
nonexecutable setValue(R,C,V) if val(R1,C)=V & R1\=R & val(R1,C)\=empty.

% 5. Setting a value at (row, column) is not executable if another cell in the same 3x3 square already has that value.
nonexecutable setValue(R,C,V) if val(R1,C1)=V & (R // 3) = (R1 // 3) & (C // 3) = (C1 // 3) & (R\=R1 | C\=C1) & val(R1,C1)\=empty.

% 6. It is impossible for two cells in the same row to have the same value.
impossible val(R,C1)=V & val(R,C2)=V & C1\=C2 & val(R,C1)\=empty & val(R,C2)\=empty.

% 7. It is impossible for two cells in the same column to have the same value.
impossible val(R1,C)=V & val(R2,C)=V & R1\=R2 & val(R1,C)\=empty & val(R2,C)\=empty.

% 8. It is impossible for two cells in the same 3x3 square to have the same value.
impossible val(R1,C1)=V & val(R2,C2)=V & (R1 // 3) = (R2 // 3) & (C1 // 3) = (C2 // 3) & (R1\=R2 | C1\=C2) & val(R1,C1)\=empty & val(R2,C2)\=empty.

% MAIN QUERY CHANGED? [UNCHANGED]
:- query
    0: val(0,2)=4 & val(0,3)=3 & val(0,6)=2 & val(0,8)=9 &
       val(1,2)=5 & val(1,5)=9 & val(1,8)=1 &
       val(2,1)=7 & val(2,4)=6 & val(2,7)=4 & val(2,8)=3 &
       val(3,2)=6 & val(3,5)=2 & val(3,7)=8 & val(3,8)=7 &
       val(4,0)=1 & val(4,1)=9 & val(4,5)=7 & val(4,6)=4 &
       val(5,1)=5 & val(5,4)=8 & val(5,5)=3 &
       val(6,0)=6 & val(6,6)=1 & val(6,8)=5 &
       val(7,2)=3 & val(7,3)=5 & val(7,5)=8 & val(7,6)=6 & val(7,7)=9 &
       val(8,1)=4 & val(8,2)=2 & val(8,3)=9 & val(8,4)=1 & val(8,6)=3.

% SAMPLE QUERIES CHANGED? [CHANGED]
% Query 1: Set value 5 in cell (0,0), where no conflicts exist (satisfiable)
:- query
    0: setValue(0,0,5);
    maxstep: val(0,0)=5.

% Query 2: Attempt to set value 5 in cell (0,0) when value 5 is already in cell (0,1); should be unsatisfiable
:- query
    0: val(0,1)=5;
    0: setValue(0,0,5);
    maxstep: val(0,0)=5.

% Query 3: Attempt to set value 3 in cell (1,1) when cell (1,1) already has value 4; should be unsatisfiable
:- query
    0: val(1,1)=4;
    0: setValue(1,1,3);
    maxstep: val(1,1)=3.

% Query 4: Attempt to set value 6 in cell (2,2) when value 6 is already in cell (5,2); should be unsatisfiable
:- query
    0: val(5,2)=6;
    0: setValue(2,2,6);
    maxstep: val(2,2)=6.

% Query 5: Attempt to set value 8 in cell (4,4) when value 8 is already in cell (3,3); should be unsatisfiable
:- query
    0: val(3,3)=8;
    0: setValue(4,4,8);
    maxstep: val(4,4)=8.