import numpy as np

def is_valid(board, r, c, num):
    # Check if the number is not repeated in the current row or column
    for i in range(9):
        if board[r][i] == num or board[i][c] == num:
            return False
    
    # Check the 3x3 square
    start_row, start_col = 3 * (r // 3), 3 * (c // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False
    return True

def solve_sudoku(board):
    empty = find_empty(board)
    if not empty:
        return True  # Solution found
    row, col = empty

    for num in range(9):
        if is_valid(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return True
            board[row][col] = -1  # Reset the last cell and try again

    return False  # Trigger backtracking

def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == -1:  # -1 denotes an empty cell
                return (i, j)
    return None

# The partially filled Sudoku board
sudoku_board = [
    [-1, -1, 3, 2, -1, -1, 1, -1, 8],
    [-1, -1, 4, -1, -1, 8, -1, -1, 0],
    [-1, 6, -1, -1, 5, -1, -1, 3, 2],
    [-1, -1, 5, -1, -1, 1, -1, 7, 6],
    [0, 8, -1, -1, -1, 6, 3, -1, -1],
    [-1, 4, -1, -1, 7, 2, -1, -1, -1],
    [5, -1, -1, -1, -1, -1, 0, -1, 4],
    [-1, -1, 2, 4, -1, 7, 5, 8, -1],
    [-1, 3, 1, 8, 0, -1, 2, -1, -1]
]

# Convert all 0s to 9s (to fit 1-9 range), and -1 indicates empty cells.
for i in range(9):
    for j in range(9):
        if sudoku_board[i][j] == 0:
            sudoku_board[i][j] = 9
        elif sudoku_board[i][j] == -1:
            sudoku_board[i][j] = -1

if solve_sudoku(sudoku_board):
    result = np.array(sudoku_board)
else:
    result = "No solution exists"

result