% PROGRAM CHANGED? [CHANGED]
:- sorts
    disk;
    peg;
    loc;
    loc >> disk;
    loc >> peg;
    integer.


:- objects
    d1, d2, d3           :: disk;
    a, b, c              :: peg;
    1..4                 :: integer.


:- variables
    D, D1, D2, D3, D4    :: disk;
    P, P1, P2, P3, P4    :: peg;
    L, L1, L2, L3, L4    :: loc;
    N, N1, N2, N3, N4    :: integer.


:- constants
    move(disk, loc)         :: exogenousAction;
    loc(disk)               :: inertialFluent(loc);
    weight(disk)            :: inertialFluent(integer);
    weight(peg)             :: inertialFluent(integer);

% constraints/rules

% 1. Moving a disk to a location causes its location to be that location.
move(D,L) causes loc(D)=L.

% 2. Moving a disk is not executable if there is another disk whose location is the disk being moved.
nonexecutable move(D,L) if loc(D1)=D & D1\=D.

% 3. Moving a disk onto another disk is not executable if the moving disk's weight is greater than the destination disk's weight.
nonexecutable move(D,L) if L=D1 & weight(D)>weight(D1) & D1\=D.

% 4. A disk cannot be moved onto itself.
nonexecutable move(D,L) if L=D.

% MAIN QUERY CHANGED? [CHANGED]
:- query
    0: loc(d1)=b & loc(d2)=d1 & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1 & weight(a)=4 & weight(b)=4 & weight(c)=4;
    maxstep: loc(d1)=c & loc(d2)=d1 & loc(d3)=d2.

% SAMPLE QUERIES CHANGED? [CHANGED]

% Query 1: Attempt to move disk d1 to peg c at step 0. Should be unsatisfiable because d1 has d2 on top of it in the initial state. (unsatisfiable)

:- query
    0: loc(d1)=b & loc(d2)=d1 & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1 & weight(a)=4 & weight(b)=4 & weight(c)=4;
    0: move(d1,c).

% Query 2: Move disk d2 from d1 to peg c at step 0. Should be satisfiable because d2 can be moved since it has no disk on top. (satisfiable)

:- query
    0: loc(d1)=b & loc(d2)=d1 & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1 & weight(a)=4 & weight(b)=4 & weight(c)=4;
    0: move(d2,c).

% Query 3: After moving d2 to c at step 0, move d1 to peg c at step 1. Should be satisfiable because d1 no longer has d2 on top. (satisfiable)

:- query
    0: loc(d1)=b & loc(d2)=d1 & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1 & weight(a)=4 & weight(b)=4 & weight(c)=4;
    0: move(d2,c);
    1: move(d1,c).

% Query 4: Attempt to move disk d1 onto disk d3 at step 0. Should be unsatisfiable because d1 is heavier than d3. (unsatisfiable)

:- query
    0: loc(d1)=b & loc(d2)=d1 & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1 & weight(a)=4 & weight(b)=4 & weight(c)=4;
    0: move(d1,d3).

% Query 5: Move disk d3 onto disk d2 at step 0. Should be satisfiable because d3 is lighter than d2 and there are no constraints preventing it. (satisfiable)

:- query
    0: loc(d1)=b & loc(d2)=d1 & loc(d3)=c & weight(d1)=3 & weight(d2)=2 & weight(d3)=1 & weight(a)=4 & weight(b)=4 & weight(c)=4;
    0: move(d3,d2).